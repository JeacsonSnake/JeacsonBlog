import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as i,a as r,d as e,e as n,w as l,r as p,o}from"./app-CM1hd37A.js";const h={},k={class:"hint-container tip"};function c(g,s){const a=p("RouteLink");return o(),d("div",null,[s[13]||(s[13]=i("h2",{id:"简介",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#简介"},[i("span",null,"简介")])],-1)),s[14]||(s[14]=i("p",null,"实现自定义话题接口消息的流程与在功能包中编写可执行程序的流程相似，其主要步骤如下：",-1)),s[15]||(s[15]=i("ol",null,[i("li",null,[e("创建并编写 "),i("code",null,".msg"),e(" 文件；")]),i("li",null,"编辑配置文件；"),i("li",null,"编译；"),i("li",null,"测试。")],-1)),i("p",null,[s[1]||(s[1]=e("因此，我们现在会在",-1)),n(a,{to:"/learningNote/Ros2_Note/co_me/2024_09_19_002.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"},{default:l(()=>[...s[0]||(s[0]=[e("之前",-1)])]),_:1}),s[2]||(s[2]=e("创建的接口功能包 ",-1)),s[3]||(s[3]=i("code",null,"base_interfaces_demo",-1)),s[4]||(s[4]=e(" 里，尝试编写一个 ",-1)),s[5]||(s[5]=i("code",null,".msg",-1)),s[6]||(s[6]=e(" 文件。该文件中包含学生的姓名、年龄、身高等字段。",-1))]),s[16]||(s[16]=r(`<h2 id="创建并编辑-msg-文件" tabindex="-1"><a class="header-anchor" href="#创建并编辑-msg-文件"><span>创建并编辑 .msg 文件</span></a></h2><p>在功能包 <code>base_interfaces_demo</code> 下新建 <code>msg</code> 文件夹，<code>msg</code> 文件夹下新建 <code>Student.msg</code> 文件，文件中输入如下内容：</p><div class="language-msg line-numbers-mode" data-highlighter="shiki" data-ext="msg" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-msg"><span class="line"><span></span></span>
<span class="line"><span>string name</span></span>
<span class="line"><span>int32 age</span></span>
<span class="line"><span>float64 height</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编辑配置文件" tabindex="-1"><a class="header-anchor" href="#编辑配置文件"><span>编辑配置文件</span></a></h2><h3 id="_1-package-xml-文件" tabindex="-1"><a class="header-anchor" href="#_1-package-xml-文件"><span>1. <code>package.xml</code> 文件</span></a></h3><p>在package.xml中需要添加一些依赖包，具体内容如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 编译依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_default_generators&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 执行依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_default_runtime&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 声明当前包所属的功能包组 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">member_of_group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_interface_packages&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">member_of_group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-cmakelists-txt-文件" tabindex="-1"><a class="header-anchor" href="#_2-cmakelists-txt-文件"><span>2. <code>CMakeLists.txt</code> 文件</span></a></h3><p>为了将.msg文件转换成对应的C++和Python代码，还需要在CMakeLists.txt中添加如下配置：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>find_package(rosidl_default_generators REQUIRED)</span></span>
<span class="line"><span># 为接口 文件生成源代码</span></span>
<span class="line"><span>rosidl_generate_interfaces(\${PROJECT_NAME}</span></span>
<span class="line"><span>    &quot;msg/Student.msg&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>终端中进入当前工作空间，编译功能包：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --packages-select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>编译完成之后，在工作空间下的install目录下将生成Student.msg文件对应的C++和Python文件，我们也可以在终端下进入工作空间，通过如下命令查看文件定义以及编译是否正常：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo/msg/Student</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，创建工作结束。</p><div class="hint-container tip"><p class="hint-container-title">包含自定义接口文件时可能会报错</p><p>创建工作结束后，你会需要在 <code>C++</code> 文件中包含自定义消息相关头文件。在那时，VSCode可能会抛出异常。你可以打开 VSCode 中的 <code>c_cpp_properties.json</code> 文件，在文件中的 <code>includePath</code> 属性下添加一行路径：</p><p><code>&quot;\${workspaceFolder}/install/base_interfaces_demo/include/**&quot;</code></p><p>添加完毕后，包含相关头文件时，异常就不会被抛出。 其他接口文件或接口包的使用也与此同理。</p></div><div class="hint-container tip"><p class="hint-container-title">Python文件导包自定义</p><p>Python文件中导入自定义消息相关的包时，为了方便使用，可以配置 <code>VSCode</code> 中的 <code>settings.json</code> 文件，在文件中的 <code>python.autoComplete.extraPaths</code> 和 <code>python.analysis.extraPaths</code> 属性下添加一行：</p><p><code>&quot;\${workspaceFolder}/install/base_interfaces_demo/lib/python3.12/site-packages&quot;</code></p><p>添加完毕后，代码便可以高亮显示且可以自动补齐，其他接口文件或接口包的使用也与此同理.</p><p>(注意：这里所使用的 ROS2 版本为 Jazzy，Python 为 3.12，因此路径结构不一定一致，请依据文件项目树自行修改创建)</p></div><hr>`,20)),i("div",k,[s[12]||(s[12]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[s[8]||(s[8]=e("如果你是从 ",-1)),s[9]||(s[9]=i("strong",null,"ROS2-004-通信机制：话题通信-分支贰-自定义消息接口",-1)),s[10]||(s[10]=e(" 来的， 可以从",-1)),n(a,{to:"/learningNote/Ros2_Note/co_me/2024_09_25_002.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E4%BB%B6"},{default:l(()=>[...s[7]||(s[7]=[e("这里",-1)])]),_:1}),s[11]||(s[11]=e("导航回去。",-1))])])])}const b=t(h,[["render",c]]),v=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me/2024_09_25.html","title":"ROS2-004-通信机制：话题通信Extra：如何实现自定义接口消息","lang":"zh-CN","frontmatter":{"title":"ROS2-004-通信机制：话题通信Extra：如何实现自定义接口消息","icon":"a-liaotianpinglun","date":"2024-09-25T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1727256186000,"updatedTime":1741599203000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":8}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"learningNote/Ros2_Note/co_me/2024_09_25.md","excerpt":"<h2>简介</h2>\\n<p>实现自定义话题接口消息的流程与在功能包中编写可执行程序的流程相似，其主要步骤如下：</p>\\n<ol>\\n<li>创建并编写 <code>.msg</code> 文件；</li>\\n<li>编辑配置文件；</li>\\n<li>编译；</li>\\n<li>测试。</li>\\n</ol>\\n<p>因此，我们现在会在<a href=\\"/learningNote/Ros2_Note/co_me/2024_09_19_002.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\\" target=\\"_blank\\">之前</a>创建的接口功能包 <code>base_interfaces_demo</code> 里，尝试编写一个 <code>.msg</code> 文件。该文件中包含学生的姓名、年龄、身高等字段。</p>"}');export{b as comp,v as data};

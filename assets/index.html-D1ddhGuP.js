import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-CM1hd37A.js";const t="/assets/GitHubActionFatalNO1-CPHDExxT.jpg",l="/assets/GitHubPagesSourcePath-SpG2sG50.jpg",o={};function p(h,i){return n(),e("div",null,[...i[0]||(i[0]=[a('<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>一些在部署静态页面时踩坑后的总结向文章。</p><h2 id="一、使用-github-actions-将静态资源网页部署到github-pages" tabindex="-1"><a class="header-anchor" href="#一、使用-github-actions-将静态资源网页部署到github-pages"><span>一、使用 Github Actions 将静态资源网页部署到Github Pages</span></a></h2><h3 id="_1-关于-github-token-权限" tabindex="-1"><a class="header-anchor" href="#_1-关于-github-token-权限"><span>1. 关于 GITHUB_TOKEN 权限</span></a></h3><p>前提: 在创建 .github/workflow/docs.yml 文件之后针对内部配置进行了相关修订。</p><p>出现问题: 在使用 Github Actions 后 workflow 出现以下报错:</p><p><img src="'+t+'" alt="GitHubActionFatalNO1"></p><p>原因: workflow 在部署代码到 gh-pages 分支时需要对默认的 secrets.GITHUB_TOKEN 进行读写操作，但是仓库默认没有给予相关权限。</p><p>解决方法: 配置默认 GITHUB_TOKEN 权限。</p><p>以下引用自官方文档<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><blockquote><p>默认情况下，当你在个人帐户中创建新存储库时，GITHUB_TOKEN 仅对 contents 和 packages 范围具有读取权限。 如果在组织中创建新存储库，则设置继承自组织设置中配置的内容。</p><p>在 GitHub.com 上，导航到存储库的主页。</p><p>在存储库名称下，单击 “设置”。 如果看不到“设置”选项卡，请选择 下拉菜单，然后单击“设置” 。</p><p>存储库标头的屏幕截图，其中显示了选项卡。 “设置”选项卡以深橙色边框突出显示。</p><p>在左侧边栏中，单击 “操作”，然后单击“常规” 。</p><p>在“工作流权限”下，选择是要让 GITHUB_TOKEN 对所有范围具有读写访问权限（允许设置），还是仅对 contents 和 packages 范围具有读取访问权限（受限设置）。</p><p>单击“保存”以应用设置。</p></blockquote><h3 id="_2-关于-github-pages-源路径切换" tabindex="-1"><a class="header-anchor" href="#_2-关于-github-pages-源路径切换"><span>2. 关于 Github Pages 源路径切换</span></a></h3><p>前提: 经过上述操作后, Github Actions 成功运行。</p><p>出现问题: 即使声称已经成功对该网页进行部署，但是实际上并没有在指定的域名下找到对应的网页。</p><p>原因: 在使用该 workflow 进行项目打包后, 需要将 Github Pages 源路径切换至被打包的文件所在路径才可以获取到对应信息。</p><p>解决方法:</p><ul><li><p>首先将项目自身setting中 Code and automation 下的 Pages&gt;Build and deployment选项，修改Source为&quot; Deploy from a branch&quot;</p></li><li><p>然后将路径进行修改，如下图红圈:</p></li></ul><p><img src="'+l+`" alt="GitHubPagesSourcePath"></p><h2 id="二、使用-leancloud做数据库-将博客用评论功能-waline-部署到-vercel-服务端时发生的问题" tabindex="-1"><a class="header-anchor" href="#二、使用-leancloud做数据库-将博客用评论功能-waline-部署到-vercel-服务端时发生的问题"><span>二、使用 leancloud做数据库，将博客用评论功能 waline 部署到 vercel 服务端时发生的问题</span></a></h2><p>参考:<a href="https://plugin-comment2.vuejs.press/zh/guide/waline.html" target="_blank" rel="noopener noreferrer">vuepress-plugin-comment2 插件中有关 配置waline的相关文档</a></p><h3 id="_1-客户端出现-500-uninitialized-问题" tabindex="-1"><a class="header-anchor" href="#_1-客户端出现-500-uninitialized-问题"><span>1.客户端出现&quot;500 Uninitialized&quot;问题</span></a></h3><p>前提：部署后在评论时一直提示&quot;500 Uninitialized&quot;。 尝试：经文档查找发现可能是需要首先在客户端进行注册，出现管理员账号之后才可以评论。</p><p>但是在尝试注册时，依然出现提示&quot;500 Uninitialized&quot;的问题。</p><p>解决方案： 排查后发现不知为何之前在vercel配置的有关LeanCloud的环境变量并没有保存。重新配置后点击保存即可。</p><h3 id="_2-无法正常加载评论的问题" tabindex="-1"><a class="header-anchor" href="#_2-无法正常加载评论的问题"><span>2.无法正常加载评论的问题</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>由于写作习惯，这里所有有关域名的网址都做了化名(xxxxx.com)。</p></div><p>前提：在博客尝试拉取评论时发现会出现无法正常加载的问题。具体表现为：</p><ul><li>多次点击“refresh”按钮，但是无法获取到之前正常评论的信息；</li><li>在vercel网页版中，查找log却发现并没没有检测到相关的API请求。</li></ul><p>解决方案: 参考waline官方GitHub discussion的<a href="https://github.com/walinejs/waline/issues/1318" target="_blank" rel="noopener noreferrer">相关讨论</a>后得知：</p><blockquote><p>lizheming commented on Aug 27, 2022 群里了解了下，应该是 *.vercel.app 域名被 DNS 污染了，按照楼上说的绑定自定义域名，或者去其它服务上部署解决吧。</p></blockquote><p>因此尝试通过以下人员所提供方案进行修复：</p><blockquote><p>elkan1788 commented on Sep 19, 2022 可以考虑使用免费域名+LeanCloud国际版本的部署方案，但就是速度慢一些，但服务还是正常的使用。 方案及效果： <a href="https://lisenhui.cn/blog/use-custom-domain-active-vercel-waline.html" target="_blank" rel="noopener noreferrer">使用自定义域名激活Vercel部署的Waline服务</a></p></blockquote><p>我以前在阿里云有注册一个已备案的域名&quot;xxxxx.com&quot;，因此把以前没有用上的域名重新启用。相关配置如下：</p><h4 id="i、在阿里云的相关配置" tabindex="-1"><a class="header-anchor" href="#i、在阿里云的相关配置"><span>I、在阿里云的相关配置</span></a></h4><p>在<a href="https://www.aliyun.com/" target="_blank" rel="noopener noreferrer">阿里云首页</a>点击&quot;控制台&quot;，点击&quot;概览/资源概览/云解析DNS/控制台&quot;，在&quot;域名解析&quot;中点击已经添加的域名，会跳转到&quot;解析设置&quot;页面。</p><ul><li>点击&quot;添加记录&quot;</li><li>设置&quot;记录类型&quot;为&quot;CNAME&quot;</li><li>我习惯使用二级域名进行分类管理，因此在&quot;主机记录&quot;中填入&quot;comment&quot;，使解析后域名变为&quot;comment.xxxxx.com&quot;</li><li>&quot;解析请求来源&quot;为&quot;默认&quot;</li><li>&quot;记录值&quot;为&quot;cname.vercel-dns.com&quot;</li><li>&quot;TTL&quot;不变，&quot;10分钟&quot;</li></ul><p>点击确认即可。</p><h4 id="ii、在vercel的相关配置" tabindex="-1"><a class="header-anchor" href="#ii、在vercel的相关配置"><span>II、在vercel的相关配置</span></a></h4><p>在 vercel已经部署好的后端项目上，点击&quot;setting&quot;,并作如下操作：</p><ul><li>点击&quot;Domains&quot;</li><li>将解析后的域名输入框中，点击&quot;Add&quot;</li></ul><p>结束。</p><h4 id="iii、在博客源码中的相关配置" tabindex="-1"><a class="header-anchor" href="#iii、在博客源码中的相关配置"><span>III、在博客源码中的相关配置</span></a></h4><p>参考: <a href="https://theme-hope.vuejs.press/zh/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">vuepress-theme-hope 指南/功能/评论</a></p><p>打开&quot;docs\\ .vuepress\\ theme.ts&quot; 或者类似的主题配置的源码，将这里替换为上面解析后的域名：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    plugins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        comment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            provider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Waline&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // waline 模式下</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            serverURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://comment.xxxxx.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// your serverURL 👈将这里替换为上面解析后的域名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结束。</p><h2 id="三、博客自定义域名所带来的问题" tabindex="-1"><a class="header-anchor" href="#三、博客自定义域名所带来的问题"><span>三、博客自定义域名所带来的问题</span></a></h2><p><strong>前提</strong>：之前在阿里云买了一个域名一直没有用，于是尝试将这个博客的域名从原来的<code>github.io</code>转到现在这个域名。如同之前所说，这个博客使用了<code>vuepress</code>作为框架，并通过 <code>Github Action workflow</code> 将这个博客的源代码进行自动的打包、部署在 <code>Github Pages</code> 上。</p><p><strong>尝试</strong>：在阿里云的工作台下，尝试通过“工作台/概览/资源概览/云解析DNS”中的相关设置进行调整。但是因为操作过于混杂，导致该域名出现了DNS被污染，导致无法正常导航的问题。</p><p><strong>解决方案</strong>：将原先操作重置后，以如下方法进行：</p><div class="hint-container info"><p class="hint-container-title">相关定义</p><p>这里将原网址定义为：“youraccount.github.io/blog/”,</p><p>希望添加的自定义域名设置为：“blog.yourdomain.com”</p></div><ol><li><p>打开阿里云“工作台/概览/资源概览/云解析DNS/域名解析”，点击需要解析的域名，进入“解析设置”.</p></li><li><p>点击添加记录，以如下设定进行配置：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">记录类型: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CNAME&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">主机记录: [</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">blog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.yourdomain.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">解析请求来源: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;默认&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">记录值: [</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">原来的域名。例如</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> youraccount.github.io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TTL: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;10分钟&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并保存。等待一段时间（半分钟左右）尝试点击刚添加的栏目条的“生效检测”，如果可以正常解析到你添加的网址，则进入下一步。</p></li><li><p>如果之前的部署位置是“youraccount.github.io/blog/”而不是“youraccount.github.io”，则查看下之前有没有修改该博客源代码打包后的base值，默认的键值对为：&quot;base: &#39;/&#39;&quot;。←这个十分重要，因为如果没有修改，博客源代码在打包之后会出现css/js/图片等依赖相对路径的文件加载不出来的问题。修改后先PUSH，再进入下一步。</p></li><li><p>修改<code>Github Action workflow</code>的设定文件，例如在本案例中 <code>.github\\workflows</code> 下的 <code>docs.yml</code>。在有关<strong>运行构建脚本</strong>的相关语句后添加以下句式：</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 写入自定义域名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Configure custom domain</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">echo blog.yourdomain.com &gt;&gt; docs/.vuepress/dist/CNAME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就使得每次打包后都可以自动生成CNAME文件，这对自定义域名的映射较为重要。修改完毕后PUSH，等待修改后<code>Github Action workflow</code>自动部署后进入下一步。</p></li><li><p>将github页面上对应仓库的<code>Github Pages</code>选项内有关Custom Domain的输入框中填入自定义的域名，并点击保存。等待一段时间。</p></li><li><p>结束！这样就可以使用自定义的域名进入自己的博客了。🎉</p></li></ol><h2 id="四、部署网站时-加载不出css-js相关样式的问题" tabindex="-1"><a class="header-anchor" href="#四、部署网站时-加载不出css-js相关样式的问题"><span>四、部署网站时，加载不出CSS/JS相关样式的问题</span></a></h2><p><strong>前提</strong>：在部署该博客后，又尝试在GITHUB Pages 上部署了另一个项目<a href="https://github.com/JeacsonSnake/bobing-jettonman-ALLinONE" target="_blank" rel="noopener noreferrer">博饼·状元筹</a>。结果部署上去之后，发现加载不出CSS/JS相关样式，开启开发者工具后发现针对该类文件的请求全部404。</p><p><strong>解决方案</strong>：因为该项目部署时所在的网址是有类似于baseURL的访问路径，因此所有CSS/JS相关样式都在“baseURL/css”或者“baseURL/js”下，因此需要进行设置，将该类静态资源文件在服务器上的基本路径设置为“\\baseURL\\”才能够实现正确的读取。</p><div class="hint-container tip"><p class="hint-container-title">具体方法</p><p>该项目是使用VUE2作为项目架构的，因此假设项目部署在域名为 <code>https://www.example.com/my-app/</code> 的服务器上，那么可以在项目的 <strong>vue.config.js</strong> 中将publicPath设置为 <code>/my-app/</code> ，以确保静态资源的访问路径正确。</p><p>示例代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        publicPath</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/my-app/&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，publicPath选项只对通过Vue CLI进行打包构建的项目有效。</p></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://docs.github.com/zh/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository" target="_blank" rel="noopener noreferrer">为存储库设置 GITHUB_TOKEN 的权限 - GitHub 文档</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,58)])])}const d=s(o,[["render",p]]),k=JSON.parse('{"path":"/postMortem/deploy/","title":"部署","lang":"zh-CN","frontmatter":{"title":"部署","icon":"box-archive"},"git":{"createdTime":1692780329000,"updatedTime":1697877286000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":5}]},"readingTime":{"minutes":7.65,"words":2296},"filePathRelative":"postMortem/deploy/README.md","excerpt":"<h2>简述</h2>\\n<p>一些在部署静态页面时踩坑后的总结向文章。</p>\\n<h2>一、使用 Github Actions 将静态资源网页部署到Github Pages</h2>\\n<h3>1. 关于 GITHUB_TOKEN 权限</h3>\\n<p>前提: 在创建 .github/workflow/docs.yml 文件之后针对内部配置进行了相关修订。</p>\\n<p>出现问题: 在使用 Github Actions 后 workflow 出现以下报错:</p>\\n<p></p>\\n<p>原因: workflow 在部署代码到 gh-pages 分支时需要对默认的 secrets.GITHUB_TOKEN 进行读写操作，但是仓库默认没有给予相关权限。</p>"}');export{d as comp,k as data};

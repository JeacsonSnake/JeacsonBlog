import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as i,a as t,d as n,e as l,w as a,r as p,o as r}from"./app-CM1hd37A.js";const k={},h={class:"hint-container tip"},g={class:"hint-container tip"},u={class:"hint-container tip"};function m(b,s){const e=p("RouteLink");return r(),o("div",null,[s[58]||(s[58]=i("h2",{id:"简介",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#简介"},[i("span",null,"简介")])],-1)),i("p",null,[s[1]||(s[1]=n("实现自定义动作接口消息的流程与",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_09_25.html"},{default:a(()=>[...s[0]||(s[0]=[n("实现自定义话题接口消息",-1)])]),_:1}),s[2]||(s[2]=n("的流程类似，其主要步骤如下：",-1))]),s[59]||(s[59]=i("ol",null,[i("li",null,[n("创建并编写 "),i("code",null,".action"),n(" 文件；")]),i("li",null,"编辑配置文件；"),i("li",null,"编译；"),i("li",null,"测试。")],-1)),i("p",null,[s[4]||(s[4]=n("因此，我们现在会在",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_10_03.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"},{default:a(()=>[...s[3]||(s[3]=[n("之前",-1)])]),_:1}),s[5]||(s[5]=n("创建的接口功能包 ",-1)),s[6]||(s[6]=i("code",null,"base_interfaces_demo",-1)),s[7]||(s[7]=n(" 里，尝试编写一个 ",-1)),s[8]||(s[8]=i("code",null,".action",-1)),s[9]||(s[9]=n(" 文件。该文件中包含请求数据(两个整型字段)与响应数据(一个整型字段)。",-1))]),s[60]||(s[60]=t(`<h2 id="创建并编辑-action-文件" tabindex="-1"><a class="header-anchor" href="#创建并编辑-action-文件"><span>创建并编辑 .action 文件</span></a></h2><p>在功能包 <code>base_interfaces_demo</code> 下新建 <code>action</code> 文件夹，<code>action</code> 文件夹下新建 <code>Progress.action</code> 文件，文件中输入如下内容：</p><div class="language-action line-numbers-mode" data-highlighter="shiki" data-ext="action" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-action"><span class="line"><span></span></span>
<span class="line"><span>int64 num</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>int64 sum</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>float64 progress</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编辑配置文件" tabindex="-1"><a class="header-anchor" href="#编辑配置文件"><span>编辑配置文件</span></a></h2><h3 id="_1-package-xml-文件" tabindex="-1"><a class="header-anchor" href="#_1-package-xml-文件"><span>1. <code>package.xml</code> 文件</span></a></h3><p>在package.xml中需要添加一些依赖包，具体内容如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 编译依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buildtool_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_default_generators&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buildtool_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;action_msgs&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 声明当前包所属的功能包组 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">member_of_group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_interface_packages&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">member_of_group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),i("div",h,[s[31]||(s[31]=i("p",{class:"hint-container-title"},"看起来有些重复？",-1)),i("p",null,[s[11]||(s[11]=i("code",null,"action",-1)),s[12]||(s[12]=n(" 文件所需的依赖包与前文 ",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_09_25.html#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"},{default:a(()=>[...s[10]||(s[10]=[n("实现自定义接口消息",-1)])]),_:1}),s[13]||(s[13]=n("中 ",-1)),s[14]||(s[14]=i("code",null,"msg",-1)),s[15]||(s[15]=n(" 文件所需的依赖包基本一致，如果是在新建的功能包中添加 ",-1)),s[16]||(s[16]=i("code",null,"action",-1)),s[17]||(s[17]=n(" 文件，那么有些依赖可以直接参考定义 ",-1)),s[18]||(s[18]=i("code",null,"msg",-1)),s[19]||(s[19]=n(" 文件时 ",-1)),s[20]||(s[20]=i("code",null,"package.xml",-1)),s[21]||(s[21]=n(" 的配置。",-1))]),i("p",null,[s[23]||(s[23]=n("如果你在之前",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_09_25.html#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"},{default:a(()=>[...s[22]||(s[22]=[n("实现自定义接口消息",-1)])]),_:1}),s[24]||(s[24]=n("时，已经创建了 ",-1)),s[25]||(s[25]=i("code",null,"base_interfaces_demo",-1)),s[26]||(s[26]=n(" 功能包，且已经为 ",-1)),s[27]||(s[27]=i("code",null,"msg",-1)),s[28]||(s[28]=n(" 文件配置过了依赖包，那么这里的 ",-1)),s[29]||(s[29]=i("code",null,"package.xml",-1)),s[30]||(s[30]=n(" 只需要新增如下代码即可：",-1))]),s[32]||(s[32]=t(`<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 编译依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buildtool_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;rosidl_default_generators&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">buildtool_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;action_msgs&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，是 <code>&lt;buildtool_depend&gt;</code> 而不是之前的 <code>&lt;build_depend&gt;</code> !</p>`,2))]),s[61]||(s[61]=t(`<h3 id="_2-cmakelists-txt-文件" tabindex="-1"><a class="header-anchor" href="#_2-cmakelists-txt-文件"><span>2. <code>CMakeLists.txt</code> 文件</span></a></h3><p>为了将 <code>.action</code> 文件转换成对应的 <code>C++</code> 和 <code>Python</code> 代码，还需要在 <code>CMakeLists.txt</code> 中添加如下配置：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>find_package(rosidl_default_generators REQUIRED)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 为接口文件生成源代码</span></span>
<span class="line"><span>rosidl_generate_interfaces(\${PROJECT_NAME}</span></span>
<span class="line"><span>    &quot;action/Progress.action&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),i("div",g,[s[50]||(s[50]=i("p",{class:"hint-container-title"},"看起来又有些重复？",-1)),i("p",null,[s[34]||(s[34]=i("code",null,"action",-1)),s[35]||(s[35]=n(" 文件所需的对",-1)),s[36]||(s[36]=i("code",null,"CMakeLists.txt",-1)),s[37]||(s[37]=n(" 文件的新配置与前文 ",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_09_25.html#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"},{default:a(()=>[...s[33]||(s[33]=[n("实现自定义接口消息",-1)])]),_:1}),s[38]||(s[38]=n("中对",-1)),s[39]||(s[39]=i("code",null,"CMakeLists.txt",-1)),s[40]||(s[40]=n(" 文件的配置基本一致，如果是在新建的功能包中添加对",-1)),s[41]||(s[41]=i("code",null,"CMakeLists.txt",-1)),s[42]||(s[42]=n(" 文件的新配置，那么直接参考上述配置即可。",-1))]),i("p",null,[s[44]||(s[44]=n("如果你在之前",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_09_25.html#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"},{default:a(()=>[...s[43]||(s[43]=[n("实现自定义接口消息",-1)])]),_:1}),s[45]||(s[45]=n("时，已经对",-1)),s[46]||(s[46]=i("code",null,"CMakeLists.txt",-1)),s[47]||(s[47]=n(" 文件进行了该配置，那么这里只需要为 ",-1)),s[48]||(s[48]=i("code",null,"rosidl_generate_interfaces",-1)),s[49]||(s[49]=n(" 函数新增一个参数即可，修改后的内容如下：",-1))]),s[51]||(s[51]=t(`<div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span></span></span>
<span class="line"><span># 为接口文件生成源代码</span></span>
<span class="line"><span>rosidl_generate_interfaces(\${PROJECT_NAME}</span></span>
<span class="line"><span>    &quot;msg/Student.msg&quot;</span></span>
<span class="line"><span>    &quot;action/Progress.action&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s[62]||(s[62]=t('<h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>终端中进入当前工作空间，编译功能包：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --packages-select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><p>编译完成之后，在工作空间下的 <code>install</code> 目录下将生成 <code>Progress.action</code> 文件对应的 <code>C++</code> 和 <code>Python</code> 文件，我们也可以在终端下进入工作空间，通过如下命令查看文件定义以及编译是否正常：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install/setup.bash</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo/action/Progress.action</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，创建工作结束。</p><div class="hint-container tip"><p class="hint-container-title">包含自定义接口文件时可能会报错</p><p>创建工作结束后，你会需要在 <code>C++</code> 文件中包含自定义消息相关头文件。在那时，VSCode可能会抛出异常。你可以打开 VSCode 中的 <code>c_cpp_properties.json</code> 文件，在文件中的 <code>includePath</code> 属性下添加一行路径：</p><p><code>&quot;${workspaceFolder}/install/base_interfaces_demo/include/**&quot;</code></p><p>添加完毕后，包含相关头文件时，异常就不会被抛出。 其他接口文件或接口包的使用也与此同理。</p></div><div class="hint-container tip"><p class="hint-container-title">Python文件导包自定义</p><p>Python文件中导入自定义消息相关的包时，为了方便使用，可以配置 <code>VSCode</code> 中的 <code>settings.json</code> 文件，在文件中的 <code>python.autoComplete.extraPaths</code> 和 <code>python.analysis.extraPaths</code> 属性下添加一行：</p><p><code>&quot;${workspaceFolder}/install/base_interfaces_demo/lib/python3.12/site-packages&quot;</code></p><p>添加完毕后，代码便可以高亮显示且可以自动补齐，其他接口文件或接口包的使用也与此同理.</p><p>(注意：这里所使用的 ROS2 版本为 Jazzy，Python 为 3.12，因此路径结构不一定一致，请依据文件项目树自行修改创建)</p></div><hr>',10)),i("div",u,[s[57]||(s[57]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[s[53]||(s[53]=n("如果你是从 ",-1)),s[54]||(s[54]=i("strong",null,"ROS2-006-通信机制：动作通信",-1)),s[55]||(s[55]=n(" 来的， 可以从",-1)),l(e,{to:"/learningNote/Ros2_Note/co_me/2024_10_15.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"},{default:a(()=>[...s[52]||(s[52]=[n("这里",-1)])]),_:1}),s[56]||(s[56]=n("导航回去。",-1))])])])}const A=d(k,[["render",m]]),B=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me/2024_10_15_002.html","title":"ROS2-006-通信机制：动作通信Extra：如何实现自定义动作通信接口消息","lang":"zh-CN","frontmatter":{"title":"ROS2-006-通信机制：动作通信Extra：如何实现自定义动作通信接口消息","icon":"handshake-simple","date":"2024-10-15T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1727950017000,"updatedTime":1741599203000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":7}]},"readingTime":{"minutes":3.51,"words":1054},"filePathRelative":"learningNote/Ros2_Note/co_me/2024_10_15_002.md","excerpt":"<h2>简介</h2>\\n<p>实现自定义动作接口消息的流程与<a href=\\"/learningNote/Ros2_Note/co_me/2024_09_25.html\\" target=\\"_blank\\">实现自定义话题接口消息</a>的流程类似，其主要步骤如下：</p>\\n<ol>\\n<li>创建并编写 <code>.action</code> 文件；</li>\\n<li>编辑配置文件；</li>\\n<li>编译；</li>\\n<li>测试。</li>\\n</ol>\\n<p>因此，我们现在会在<a href=\\"/learningNote/Ros2_Note/co_me/2024_10_03.html#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\\" target=\\"_blank\\">之前</a>创建的接口功能包 <code>base_interfaces_demo</code> 里，尝试编写一个 <code>.action</code> 文件。该文件中包含请求数据(两个整型字段)与响应数据(一个整型字段)。</p>"}');export{A as comp,B as data};

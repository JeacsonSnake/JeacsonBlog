import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as a,a as i,d as e,e as n,w as r,r as l,o as h}from"./app-CM1hd37A.js";const d="/assets/rqt_0001-CMgTjQEl.png",c="/assets/rqt_0002-CvW91IoG.png",g="/assets/rqt_0003-CXZ0eQ_D.png",m="/assets/rqt_0004-D2-dreL2.png",_="/assets/rqt_0005-BqwRF804.png",k="/assets/rqt_0006-JW6xLDwk.png",b="/assets/rqt_0007-C2OpO4Dk.png",u="/assets/rqt_0008-RA44nOPU.png",v="/assets/rqt_0009-CM6C3Zh4.png",R="/assets/rqt_0010-bP0JnYWo.png",f="/assets/rqt_0011-zy0cAIJb.png",y="/assets/rqt_0012-tQmqmIzN.png",F={};function q(A,s){const t=l("RouteLink");return h(),o("div",null,[a("p",null,[s[1]||(s[1]=e("上半部分见",-1)),n(t,{to:"/learningNote/Ros2_Note/co_me_2/2025_04_12.html"},{default:r(()=>[...s[0]||(s[0]=[e("ROS2-014-通信机制补完：通信机制工具（一）综述与命令行工具",-1)])]),_:1})]),s[7]||(s[7]=i('<hr><h2 id="二、图形化工具-rqt" tabindex="-1"><a class="header-anchor" href="#二、图形化工具-rqt"><span>二、图形化工具（RQt）</span></a></h2><h3 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h3><p><strong>RQt</strong> 是一个基于 <strong>Qt 框架</strong> 开发的 GUI 框架。它通过应用各种 “以插件形式存在的工具与接口” 实现在单个页面开发、调试与监控机器人系统，其允许用户通过配置插件灵活地与 ROS2 系统进行交互。作为通信机制工具只是其中的一种功能，在这里仅会做一些简要的入门介绍。</p><div class="hint-container info"><p class="hint-container-title">拓展信息 | In case you want to know</p><p><strong>Qt 框架</strong> 是1991年由 <em>Qt Company</em> 开发的跨平台 C++ 图形用户界面应用程序开发框架，可构建高性能的桌面、移动及Web应用程序。</p><p>如果你希望更加了解其信息，你可以通过其官网进行深入了解与学习。在他官网上有专门针对初学者所设立的 <a href="https://www.qt.io/academy" target="_blank" rel="noopener noreferrer">Qt Academy</a> 可供免费在线学习。</p></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>在一般情况下，只要在安装 ROS2 时使用的是 desktop 版本，则 ROS2 会默认安装 RQt 工具箱。如果你需要另外安装，你可以使用如下安装方式：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ros-jazzy-rqt</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这里使用的 ROS2 版本为 Jazzy Jalisco LTS，若需要其他版本，请查阅 ROS2 官方文档。</p></div><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>当你正在运行 ros2 节点 时，你可以在新控制台中使用以下命令进行 RQt 的启动：</p><ul><li><code>rqt</code></li><li><code>ros2 run rqt_gui rqt_gui</code></li></ul><p>你将会得到以下 GUI 界面:</p><p><img src="'+d+'" alt="RQt 初始化界面"></p><hr><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>作为通信机制工具，你可以在 <code>plugins</code> 选项卡中选择你所需要的插件工具。</p><h4 id="_1-节点表" tabindex="-1"><a class="header-anchor" href="#_1-节点表"><span>1. 节点表</span></a></h4><p>例如，你可以通过以下方式打开节点表：</p><p><img src="'+c+'" alt="RQt 开启节点表"></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>当然如果你熟悉 命令行工具， 也可以直接通过：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rqt_graph</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rqt_graph</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rqt_graph</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开该节点表。</p></div><p>在 RQt 界面会出现以下内容：</p><p><img src="'+g+'" alt="节点表"></p><p>在该节点表中会展示目前正在运行的节点信息，以及它们是如何通过 topic 等通信机制连接彼此以实现相互交流。</p><h4 id="_2-消息发布器" tabindex="-1"><a class="header-anchor" href="#_2-消息发布器"><span>2. 消息发布器</span></a></h4><p>例如，你可以通过以下方法开启 消息发布器：</p><p><img src="'+m+'" alt="如何开启 message 发布器"></p><p>该页面的内容如下：</p><p><img src="'+_+'" alt="message 发布器"></p><p>你可以通过针对某个 topic 添加相应的 publisher：</p><p><img src="'+k+'" alt="添加 topic publisher"></p><p>以实现对应 topic 的调试。</p>',32)),a("p",null,[s[3]||(s[3]=e("我们以",-1)),n(t,{to:"/learningNote/Ros2_Note/co_me/2024_09_22.html"},{default:r(()=>[...s[2]||(s[2]=[e("ROS2-004-通信机制：话题通信-分支壹-原生消息接口",-1)])]),_:1}),s[4]||(s[4]=e("内所使用的示例为例子。当启动订阅方之后，我们在这里针对名为 ",-1)),s[5]||(s[5]=a("em",null,"/chatter",-1)),s[6]||(s[6]=e(" 的 topic 进行调试：",-1))]),s[8]||(s[8]=i('<p><img src="'+b+'" alt="调试信息"></p><p>通过勾选前方的方框开启 message 的发送：</p><p><img src="'+u+'" alt="发送消息"></p><p>你就可以在订阅方启动时所属控制台接收到相应的信息：</p><p><img src="'+v+'" alt="消息订阅"></p><h4 id="_3-service-调用器" tabindex="-1"><a class="header-anchor" href="#_3-service-调用器"><span>3. service 调用器</span></a></h4><p>例如，你可以通过以下方法开启 service 调用器：</p><p><img src="'+R+'" alt="how to open a service caller"></p><p>该页面的内容如下：</p><p><img src="'+f+'" alt="service caller"></p><p>你可以在上方选择对应的 service 回调函数：</p><p><img src="'+y+'" alt="maybe"></p><p>后进行相应调用，以实现其调试。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本小节针对命令行工具与图形化工具两种通信机制工具进行了相对简单的阐述。在 ros2 节点间通信时，这两种工具都可以在调试相关功能上发挥重要作用。是学习 ROS2 是不得不品尝的一环🤣</p>',15))])}const Q=p(F,[["render",q]]),S=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me_2/2025_04_13.html","title":"ROS2-015-通信机制补完：通信机制工具（二）图形化工具（RQt）与总结","lang":"zh-CN","frontmatter":{"title":"ROS2-015-通信机制补完：通信机制工具（二）图形化工具（RQt）与总结","icon":"envelopes-bulk","date":"2025-04-13T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1744537195000,"updatedTime":1744537195000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":1}]},"readingTime":{"minutes":3.1,"words":931},"filePathRelative":"learningNote/Ros2_Note/co_me_2/2025_04_13.md","excerpt":"<p>上半部分见<a href=\\"/learningNote/Ros2_Note/co_me_2/2025_04_12.html\\" target=\\"_blank\\">ROS2-014-通信机制补完：通信机制工具（一）综述与命令行工具</a></p>\\n<hr>\\n<h2>二、图形化工具（RQt）</h2>\\n<h3>简述</h3>\\n<p><strong>RQt</strong> 是一个基于 <strong>Qt 框架</strong> 开发的 GUI 框架。它通过应用各种 “以插件形式存在的工具与接口” 实现在单个页面开发、调试与监控机器人系统，其允许用户通过配置插件灵活地与 ROS2 系统进行交互。作为通信机制工具只是其中的一种功能，在这里仅会做一些简要的入门介绍。</p>"}');export{Q as comp,S as data};

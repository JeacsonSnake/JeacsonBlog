import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,b as i,d as a,e,w as h,r as k,o as d}from"./app-CM1hd37A.js";const r={},c={class:"hint-container info"};function o(g,s){const l=k("RouteLink");return d(),p("div",null,[s[10]||(s[10]=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在机器人操作系统中，节点是程序的基本构成单元。一个完整的、系统性的功能模块由多个节点构成，在启动某个功能模块时可能需要依次启动这些节点。</p><p>以机器人的导航功能为例，其涉及的节点主要有以下几种：</p><ul><li>底盘驱动；</li><li>雷达驱动；</li><li>摄像头驱动；</li><li>imu 驱动；</li><li>地图服务；</li><li>路径规划；</li><li>运动控制；</li><li>环境感知；</li><li>定位；</li><li>etc.</li></ul><p>且不同的节点启动时，可能还会涉及到各种参数的导入、节点间执行逻辑的处理等。</p><p>如果在此时继续只使用 <code>ros2 run</code> 指令逐一执行节点，则过于繁琐。这时我们便可以通过 ROS2 所提供的 <code>launch</code> 模块以实现节点的批量启动。</p><p><code>launch</code> 模块通常由 <code>launch</code> 文件 与 <code>ros2 launch</code> 命令 两个部分所组成，前者用于打包并配置节点，而后者用于执行 launch 文件。</p><h2 id="文件实现的准备工作" tabindex="-1"><a class="header-anchor" href="#文件实现的准备工作"><span>文件实现的准备工作</span></a></h2><p>终端下创建工作空间：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws02_tools/src</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws02_tools/src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入工作空间的src目录:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用如下两条命令分别创建C++功能包、Python功能包:</p><p><strong>C++:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp01_launch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclcpp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Python:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py01_launch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclpy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="launch-的简单使用流程" tabindex="-1"><a class="header-anchor" href="#launch-的简单使用流程"><span>launch 的简单使用流程</span></a></h2><p>在 ROS2 中，launch 文件可以使用 <code>Python</code>、<code>XML</code> 或 <code>YAML</code> 编写，不同格式的 launch 文件基本使用流程一致。</p>`,19)),i("div",c,[s[3]||(s[3]=i("p",{class:"hint-container-title"},"为了之后编写 Python 格式文件时能够更加方便，你可以……",-1)),i("p",null,[s[1]||(s[1]=a("在使用Python版的 launch 文件时，由于其涉及到的 API 众多，为了提高编码效率，你可以在 VScode 中设置 launch 文件的代码模板。参照",-1)),e(l,{to:"/learningNote/coding_skill/2024_09_23.html"},{default:h(()=>[...s[0]||(s[0]=[a("这里",-1)])]),_:1}),s[2]||(s[2]=a("。在 VScode 的配置文件 python.json 中，你可以添加如下内容：",-1))]),s[4]||(s[4]=n(`<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;ros2 launch py&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;prefix&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ros2_launch_py&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;body&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;from launch inport LaunchDescription&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;from launch_ros.actions import Node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 封装终端指令相关类------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.actions import ExecuteProcess&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.substitutions import FindExecutable&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 参数声明与获取------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;from launch.actions import DeclareLaunchArgument&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;from launch.substitutions import LaunchConfiguration&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 文件包含相关------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.actions import IncludeLaunchDescription&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.launch_description_sources import PythonLaunchDescriptionSource&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 分组相关------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch_ros.actions import PushRosNamespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.actions import GroupAction&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 事件相关------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.event_handlers import OnProcessStart, OnProcessExit&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from launch.actions import ExecuteProcess, RegisterEventHandler, LogInfo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# 获取功能包下share目录路径------&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;# from ament_index_python.packages import get_package_share_directory&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;def generate_launch_description():&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;    &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;    return LaunchDescription([])&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ros2 launch&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),s[11]||(s[11]=n(`<p>接下来我们通过一个案例演示 launch 文件的简单编写编译流程，案例需求：编写并执行 launch 文件，可以启动两个节点。</p><p>其实现步骤一般有如下几步：</p><ol><li>编写launch文件；</li><li>编辑配置文件；</li><li>编译；</li><li>执行。</li></ol><p>我们将该案例分为 C++ 实现 及 Python 实现 两个部分。</p><h3 id="c-实现" tabindex="-1"><a class="header-anchor" href="#c-实现"><span>C++ 实现</span></a></h3><h4 id="_1-编写launch文件" tabindex="-1"><a class="header-anchor" href="#_1-编写launch文件"><span>1. 编写launch文件</span></a></h4><p>在功能包 <code>cpp01_launch</code> 下创建 <strong>launch 目录</strong>，<code>launch 文件</code> 可以是 <code>Python 文件</code>、<code>xml 文件</code> 或者 <code>yaml 文件</code>，不同类型的 <code>launch 文件</code> 可以直接存储于 <strong>launch 目录</strong> 下，为了方便管理，我们也可以在 <strong>launch 目录</strong> 下新建 <code>py</code>、<code>xml</code> 、<code>yaml</code> 三个文件夹，以分别存储对应类型的 <strong>launch 文件</strong>。</p><p>在为上述不同格式的 launch 文件在命名时，一般会使用 <code>_launch.py</code>、<code>_launch.xml</code>、<code>_launch.yaml</code> 或者 <code>.launch.py</code>、<code>.launch.xml</code>、<code>.launch.yaml</code> 作为后缀名。不同类型的 <strong>launch 文件</strong> 命名示例如下：</p><ul><li><strong>Python 文件</strong>：<code>py00_base_launch.py</code> 或 <code>py00_base.launch.py</code></li><li><strong>xml 文件</strong>：<code>py00_base_launch.xml</code> 或 <code>xml00_base.launch.xml</code></li><li><strong>yaml 文件</strong>：<code>py00_base_launch.yaml</code> 或 <code>yaml00_base.launch.yaml</code></li></ul><p>不同类型的 <strong>launch 文件</strong> 内容示例如下：</p><ul><li><p><strong>Python 文件</strong>：以 <code>py00_base.launch.py</code> 为例</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> launch inport LaunchDescription</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> launch_ros.actions </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Node</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generate_launch_description</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    turtle1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;turtlesim&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">executable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;turtlesim_node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;t1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    turtle2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;turtlesim&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">executable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;turtlesim_node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;t2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> LaunchDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([turtle1, turtle2])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>xml 文件</strong>：以 <code>xml00_base.launch.xml</code> 为例</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> pkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim_node&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> pkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim_node&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>yaml 文件</strong>：以 <code>yaml00_base.launch.yaml</code> 为例</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    pkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim_node&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sim&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t1&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">- </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    pkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;turtlesim_node&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sim&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;t2&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-编辑配置文件" tabindex="-1"><a class="header-anchor" href="#_2-编辑配置文件"><span>2. 编辑配置文件</span></a></h4><p>你需要编辑配置文件后，才可以正常使用 <em>launch 文件</em> 。若没有进行配置文件的编辑而直接进行编译，则在编译过程中，这些 <em>launch 文件</em> 并不会自动被系统识别。</p><p>你必须在 <code>CMakeLists.txt</code> 中通过 <code>install(DIRECTORY ...)</code> 代码明确指定将 <em>launch 文件</em> 安装到 ROS2 的共享资源目录 (即 <code>share/\${PROJECT_NAME}</code>)。只有安装到该路径后，才能够通过 <code>ros2 launch</code> 命令或 <code>launch 描述文件</code> 对它们进行调用。</p><p>在针对功能包进行首次配置时，在 <code>CMakeLists.txt</code> 中 <code>👈</code> 位置添加以下语句：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>......</span></span>
<span class="line"><span>find_package(rclcpp REQUIRED)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>install(DIRECTORY launch DESTINATION share/\${PROJECT_NAME}) 👈</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if(BUILD_TESTING)</span></span>
<span class="line"><span>......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该相关配置在该功能包中仅需设置此次一次，即无论之后该功能包的 <em>launch 目录</em> 下会配置多少个 <strong>launch 文件</strong> 皆仅需此配置适用即可。</p><div class="hint-container tip"><p class="hint-container-title">做完这一步，请提前编译下</p><p>为确保该配置无误，在进行该配置后，建议提前使用 <code>colcon</code> 进行一次编译。若配置无误，其会在 <code>install/\${PROJECT_NAME}/share/\${PROJECT_NAME}</code> 目录下正常生成 <code>launch 目录</code> 结构。</p></div><div class="hint-container info"><p class="hint-container-title">拓展阅读</p><p><code>\${PROJECT_NAME}</code> 指的是功能包同名目录，简单点说就是和你所编译的那个功能包一样名字的另一个目录。</p></div><p>当然，对于带有启动文件的功能包，最好在功能包的 <code>package.xml</code> 中添加一个执行依赖包 <code>ros2launch</code>:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;ros2launch&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这可以确保构建功能包后可以使用 <code>ros2 launch</code> 命令，以及能够确保可以识别不同格式的 launch 文件。</p><h4 id="_3-编译" tabindex="-1"><a class="header-anchor" href="#_3-编译"><span>3. 编译</span></a></h4><p>在终端中进入当前工作空间，编译功能包：</p><p><code>colcon build --package-select cpp01_launch</code></p><h4 id="_4-执行" tabindex="-1"><a class="header-anchor" href="#_4-执行"><span>4. 执行</span></a></h4><p>在当前工作空间下进入终端中，使用以下指令进行运行：(以 <code>py00_base.launch.py</code> 为例)</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> launch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp01_launch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py00_base.launch.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python-实现" tabindex="-1"><a class="header-anchor" href="#python-实现"><span>Python 实现</span></a></h3><p>在 Python 中实现 launch 文件的编写使用实际上与 在 C++ 中所经历的实现流程基本一致，其主要区别在 <strong>编辑配置文件上</strong>。</p><h4 id="i-编写launch文件" tabindex="-1"><a class="header-anchor" href="#i-编写launch文件"><span>Ⅰ. 编写launch文件</span></a></h4><p>与<a href="#1-%E7%BC%96%E5%86%99launch%E6%96%87%E4%BB%B6"><strong>前文</strong></a>所述相同。</p><h4 id="ii-编辑配置文件" tabindex="-1"><a class="header-anchor" href="#ii-编辑配置文件"><span>Ⅱ. 编辑配置文件</span></a></h4><p>在该步骤中，你需要编辑 <code>setup.py</code> 文件。在其 <code>data_files</code> 属性中，添加你所编写的相关 launch 文件的 <strong>文件路径</strong>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">......</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> glob </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> glob</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">package_name,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    ...</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    data_files</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;share/ament_index/resource_index/packages&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;resource/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package_name]),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;share/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package_name, [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;package.xml&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]),</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # launch 文件相关配置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 这里按照你的文件命名而定。若为&quot;_launch&quot;，则使用&quot;_launch&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;share/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package_name, </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;launch/py/*.launch.py&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;share/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package_name, </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;launch/xml/*.launch.xml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;share/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package_name, </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;launch/yaml/*.launch.yaml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]，</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，对于带有启动文件的功能包，最好在功能包的 <code>package.xml</code> 中添加一个执行依赖包 <code>ros2launch</code>:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;ros2launch&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这可以确保构建功能包后可以使用 <code>ros2 launch</code> 命令，以及能够确保可以识别不同格式的 launch 文件。</p><h4 id="iii-编译" tabindex="-1"><a class="header-anchor" href="#iii-编译"><span>Ⅲ. 编译</span></a></h4><p>在终端中进入当前工作空间，编译功能包：</p><p><code>colcon build --package-select py01_launch</code></p><h4 id="iv-执行" tabindex="-1"><a class="header-anchor" href="#iv-执行"><span>Ⅳ. 执行</span></a></h4><p>在当前工作空间下进入终端中，使用以下指令进行运行：(以 <code>py00_base.launch.py</code> 为例)</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install/setup.bash</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> launch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py01_launch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py00_base.launch.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于-launch-文件的更系统介绍" tabindex="-1"><a class="header-anchor" href="#关于-launch-文件的更系统介绍"><span>关于 launch 文件的更系统介绍</span></a></h2>`,45)),i("p",null,[s[6]||(s[6]=a("你可以参考",-1)),e(l,{to:"/learningNote/Ros2_Note/launch_rosbag2/2025_04_29.html"},{default:h(()=>[...s[5]||(s[5]=[i("strong",null,"下一篇",-1)])]),_:1}),s[7]||(s[7]=a("内容，那里详细的介绍了使用[python]、[XML]、[YAML] 三种语言编写 ",-1)),s[8]||(s[8]=i("strong",null,"launch 文件",-1)),s[9]||(s[9]=a(" 时所涉及的相关语法。",-1))])])}const y=t(r,[["render",o]]),B=JSON.parse('{"path":"/learningNote/Ros2_Note/launch_rosbag2/2025_04_28.html","title":"ROS2-016-ROS2工具：启动文件 launch 的介绍及其简单使用","lang":"zh-CN","frontmatter":{"title":"ROS2-016-ROS2工具：启动文件 launch 的介绍及其简单使用","icon":"kitchen-set","date":"2025-04-28T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1745813809000,"updatedTime":1756260998000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":2}]},"readingTime":{"minutes":5.97,"words":1790},"filePathRelative":"learningNote/Ros2_Note/launch_rosbag2/2025_04_28.md","excerpt":"<h2>简介</h2>\\n<p>在机器人操作系统中，节点是程序的基本构成单元。一个完整的、系统性的功能模块由多个节点构成，在启动某个功能模块时可能需要依次启动这些节点。</p>\\n<p>以机器人的导航功能为例，其涉及的节点主要有以下几种：</p>\\n<ul>\\n<li>底盘驱动；</li>\\n<li>雷达驱动；</li>\\n<li>摄像头驱动；</li>\\n<li>imu 驱动；</li>\\n<li>地图服务；</li>\\n<li>路径规划；</li>\\n<li>运动控制；</li>\\n<li>环境感知；</li>\\n<li>定位；</li>\\n<li>etc.</li>\\n</ul>\\n<p>且不同的节点启动时，可能还会涉及到各种参数的导入、节点间执行逻辑的处理等。</p>"}');export{y as comp,B as data};

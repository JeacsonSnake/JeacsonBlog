import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as n}from"./app-CM1hd37A.js";const t={};function o(r,e){return n(),i("div",null,[...e[0]||(e[0]=[a('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在 ROS2 中编写功能包时，一般会在单个空间内进行编写与编译。但是当程序员需要经由多个工作空间进行不同的功能包的编写式，很可能会出现在不同的工作空间下将不同的功能包命名为同一个名字的情况。例如在 工作空间A 和 工作空间B 中都创建了一个名字叫 “C” 的功能包，假设该功能包里都有一个 “C_node” 节点，那么当我们新建终端并直接执行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C_node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>时，会执行哪一个工作空间下的功能包呢？</p><h2 id="工作空间覆盖机制" tabindex="-1"><a class="header-anchor" href="#工作空间覆盖机制"><span>工作空间覆盖机制</span></a></h2><p>在 ROS2 中，当存在同名功能包位于不同工作空间时，执行 <code>ros2 run C C_node</code> 的具体行为取决于 ROS2 中的 <strong>工作空间覆盖机制</strong>。该机制由以下两个因素构成：</p><ol><li>当 ROS2 尝试搜索功能包时，它会通过一个环境变量 <code>AMENT_PREFIX_PATH</code> （C++ 和 Python 都使用 <code>AMENT_PREFIX_PATH</code>，而 Python 还需要依赖 <code>PYTHONPATH</code>）进行搜索。该变量记录了各个工作空间的路径，而 <strong>路径的顺序决定了其优先级</strong>，其中 <strong>后添加的路径会被优先搜索</strong>。</li><li>当你在特定的工作空间下执行 <code>. install/setup.bash</code>，或者在任意路径位置下执行 <code>source &lt;特定工作空间路径&gt;/install/setup.bash</code> 时，该特定工作空间的路径会被记录并前置到 <code>AMENT_PREFIX_PATH</code> 内部。</li></ol><p>因此当你在不同工作空间中出现同名功能包时，那么该功能包是否会被执行，取决于你对不同工作空间取 <code>source</code> 的 <strong>顺序</strong>：</p><ul><li><p>如果你只在终端激活了 工作空间A或B 中的一个，ROS2 就只能找到 <em>被激活的</em> 工作空间中的包，此时它便会明确地执行对应的功能包。</p></li><li><p>如果你按顺序 source 两个工作空间时：</p><ul><li>若 <strong>先</strong> source A <strong>后</strong> source B，因为 B 的路径在 <code>AMENT_PREFIX_PATH</code> 中更靠前，工作空间B 的包会生效。</li><li>若 <strong>先</strong> source B <strong>后</strong> source A：因为 A 的路径在 <code>AMENT_PREFIX_PATH</code> 中更靠前，工作空间A 的包会生效。</li></ul></li></ul><h2 id="功能包重名可以用来做什么" tabindex="-1"><a class="header-anchor" href="#功能包重名可以用来做什么"><span>功能包重名可以用来做什么？</span></a></h2><p>可以让你更加混淆。因此建议是不要这么做😅</p><div class="hint-container tip"><p class="hint-container-title">或者你可以。。。</p><p>在给不同的功能包命名时，你可以尝试使用 “&lt;工作空间&gt;-&lt;功能包名&gt;” 的命名方式，这样就可以大概率避免不同空间内的功能包重名了☝🤓</p></div>',12)])])}const h=s(t,[["render",o]]),c=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me_2/2025_03_13.html","title":"ROS2-010-通信机制补完：功能包重名和工作空间覆盖机制","lang":"zh-CN","frontmatter":{"title":"ROS2-010-通信机制补完：功能包重名和工作空间覆盖机制","icon":"code-merge","date":"2025-03-13T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1741837442000,"updatedTime":1741837442000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":1}]},"readingTime":{"minutes":2.24,"words":672},"filePathRelative":"learningNote/Ros2_Note/co_me_2/2025_03_13.md","excerpt":"<h2>简介</h2>\\n<p>在 ROS2 中编写功能包时，一般会在单个空间内进行编写与编译。但是当程序员需要经由多个工作空间进行不同的功能包的编写式，很可能会出现在不同的工作空间下将不同的功能包命名为同一个名字的情况。例如在 工作空间A 和 工作空间B 中都创建了一个名字叫 “C” 的功能包，假设该功能包里都有一个 “C_node” 节点，那么当我们新建终端并直接执行</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-bash\\"><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">ros2</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> run</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> C</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> C_node</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,c as data};

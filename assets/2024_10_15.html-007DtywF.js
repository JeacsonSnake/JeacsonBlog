import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as i,a as p,d as e,e as a,w as l,r as h,o}from"./app-CM1hd37A.js";const d="/assets/Action_Communications_First-DoKpQPCX.gif",k="/assets/Action_Communications_Second-fMY-T1C6.gif",g="/assets/Action_Communications_Third-CBcUsJxZ.gif",m={};function u(A,s){const n=h("RouteLink");return o(),r("div",null,[s[17]||(s[17]=i("h2",{id:"简介",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#简介"},[i("span",null,"简介")])],-1)),i("p",null,[s[1]||(s[1]=i("strong",null,"动作通信(Actions)",-1)),s[2]||(s[2]=e(" 同样是一种基于 ",-1)),s[3]||(s[3]=i("code",null,"请求响应",-1)),s[4]||(s[4]=e(" 的方式，以实现不同节点之间数据传输的通信模式。其中发送请求数据的对象称为 ",-1)),s[5]||(s[5]=i("strong",null,"客户端",-1)),s[6]||(s[6]=e("，接受请求并发送数据相应的对象称之为 ",-1)),s[7]||(s[7]=i("strong",null,"服务端",-1)),s[8]||(s[8]=e("。为了与前文的 ",-1)),a(n,{to:"/learningNote/Ros2_Note/co_me/2024_10_03.html"},{default:l(()=>[...s[0]||(s[0]=[e("服务通信",-1)])]),_:1}),s[9]||(s[9]=e(" 相区分，将这里的客户端称为动作客户端，服务端称为动作服务端。",-1))]),s[18]||(s[18]=p('<p>在结构上，动作通信由目标、反馈和结果三个部分组成,因此和 <strong>服务通信</strong> 不同的是，<strong>动作通信</strong> 可以在请求响应过程中获取连续反馈，并且也可以向动作服务端发送任务取消请求。</p><p>在底层实现上，动作通信是建立在话题通信和服务通信之上的，目标的发送与结果的获取是通过对服务通信封装来实现的，而连续反馈则是通过对话题通信的封装来实现的，动作通信本质上是话题通信和服务通信的结合体。因此与前两种通信一样，动作客户端和动作服务端通过话题(Topic)相关联，动作客户端和动作服务端可以互相进行数据传输交互。在服务通信中，消息的流向也是双向的。</p><p>对于两个使用动作通信进行交流的节点（以下称为A、B）而言，这两个节点的动作通信整体流程如下：</p><ol><li><p>节点A的动作客户端发送 <strong>目标请求</strong>（即动作目标）至节点B的动作服务端。动作服务端会基于当前状态、资源是否可用等条件，决定该目标是否可以被节点B自身接受。若可以，节点B的动作服务端返回 <strong>目标接受响应</strong> 至节点A的动作客户端，并生成一个 <strong>Goal ID</strong> 作为唯一标识符，以标识该任务。</p><p><img src="'+d+'" alt="动作通信_过程一"></p></li><li><p>节点A的动作客户端发送目标执行请求至节点B的动作服务端。节点B开始执行相关请求，并且节点B的动作服务端在执行过程中返回连续的处理结果给节点A的动作客户端作为实时反馈。</p><p><img src="'+k+'" alt="动作通信_过程二"></p></li><li><p>节点B执行相关请求完毕，将最终结果通过节点B的动作服务端返回至节点A的动作客户端。流程结束。</p><p><img src="'+g+`" alt="动作通信_过程三"></p></li></ol><p>其中，在节点B执行相关请求的场合下，节点A的动作客户端可以通过对节点B的动作服务端发送 <strong>取消目标请求</strong> 取消正在执行的任务，并在节点B的动作服务端检查当前任务的状态，决定可以取消任务后，取消相关任务并结束相关动作通信。</p><p>因此，动作通信一般更适用于长时间运行的任务以及相对耗时的请求响应场景，用以获取连续的状态反馈信息。</p><h2 id="动作通信的简单实现" tabindex="-1"><a class="header-anchor" href="#动作通信的简单实现"><span>动作通信的简单实现</span></a></h2><p>现在，我们通过针对以下案例需求进行C++与Python的分别实现，以更加深入了解动作通信。</p><h3 id="案例需求-案例分析" tabindex="-1"><a class="header-anchor" href="#案例需求-案例分析"><span>案例需求&amp;案例分析</span></a></h3><p>需求：编写动作通信，动作客户端提交一个整型数据N，动作服务端接收请求数据并累加1-N之间的所有整数，将最终结果返回给动作客户端，且每累加一次都需要计算当前运算进度并反馈给动作客户端。</p><p>分析：在上述需求中，我们需要关注以下三个要素：</p><ol><li>动作客户端；</li><li>动作服务端；</li><li>消息载体。</li></ol><h3 id="流程简介" tabindex="-1"><a class="header-anchor" href="#流程简介"><span>流程简介</span></a></h3><p>案例实现前需要自定动作接口。</p><p>在接口准备完毕后，动作通信实现的主要步骤如下：</p><ol><li>编写动作服务端实现；</li><li>编写动作客户端实现；</li><li>编辑配置文件；</li><li>编译；</li><li>执行。</li></ol><p>案例会采用C++和Python分别实现，且二者都遵循上述实现流程。</p><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h3><p>终端下创建工作空间：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws01_plumbing/src</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws01_plumbing/src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入工作空间的src目录:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用如下命令创建之后会用到的接口功能包:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_cmake</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用如下两条命令分别创建C++功能包、Python功能包及其所需服务端节点:</p><p><strong>C++:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp03_action</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclcpp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclcpp_action</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --node-name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo01_action_server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Python:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py03_action</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclpy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> base_interfaces_demo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --node-name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo01_action_server_py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在接口功能包中自定义服务接口消息文件：</p>`,30)),i("p",null,[s[11]||(s[11]=e("具体实现请参考",-1)),a(n,{to:"/learningNote/Ros2_Note/co_me/2024_10_15_002.html"},{default:l(()=>[...s[10]||(s[10]=[e("这里",-1)])]),_:1})]),s[19]||(s[19]=i("p",null,"准备工作到此完毕。",-1)),s[20]||(s[20]=i("hr",null,null,-1)),i("p",null,[s[14]||(s[14]=e("接下来你便可以通过 ",-1)),a(n,{to:"/learningNote/Ros2_Note/co_me/2024_10_16.html"},{default:l(()=>[...s[12]||(s[12]=[e("C++",-1)])]),_:1}),s[15]||(s[15]=e(" 和 ",-1)),a(n,{to:"/learningNote/Ros2_Note/co_me/2024_10_16_002.html"},{default:l(()=>[...s[13]||(s[13]=[e("Python",-1)])]),_:1}),s[16]||(s[16]=e(" 来分别实现服务通信了。",-1))]),s[21]||(s[21]=i("h2",{id:"总结",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#总结"},[i("span",null,"总结")])],-1)),s[22]||(s[22]=i("p",null,"在这一节中，我们系统的阐述了如何依据动作通信相关原理，通过自行操作，实现节点之间简单的动作通信，并且发现了一些计算机语言间的差别。这一章节所学习的通信方式是四种通信方式中最为复杂的，因此还请多加注意。",-1))])}const y=t(m,[["render",u]]),F=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me/2024_10_15.html","title":"ROS2-006-通信机制：动作通信","lang":"zh-CN","frontmatter":{"title":"ROS2-006-通信机制：动作通信","icon":"handshake-simple","date":"2024-10-15T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1729002222000,"updatedTime":1741599203000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":5}]},"readingTime":{"minutes":4.57,"words":1370},"filePathRelative":"learningNote/Ros2_Note/co_me/2024_10_15.md","excerpt":"<h2>简介</h2>\\n<p><strong>动作通信(Actions)</strong> 同样是一种基于 <code>请求响应</code> 的方式，以实现不同节点之间数据传输的通信模式。其中发送请求数据的对象称为 <strong>客户端</strong>，接受请求并发送数据相应的对象称之为 <strong>服务端</strong>。为了与前文的 <a href=\\"/learningNote/Ros2_Note/co_me/2024_10_03.html\\" target=\\"_blank\\">服务通信</a> 相区分，将这里的客户端称为动作客户端，服务端称为动作服务端。</p>\\n<p>在结构上，动作通信由目标、反馈和结果三个部分组成,因此和 <strong>服务通信</strong> 不同的是，<strong>动作通信</strong> 可以在请求响应过程中获取连续反馈，并且也可以向动作服务端发送任务取消请求。</p>"}');export{y as comp,F as data};

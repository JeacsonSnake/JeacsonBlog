import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,o as e}from"./app-CM1hd37A.js";const n={};function t(h,i){return e(),l("div",null,[...i[0]||(i[0]=[a(`<h2 id="_3、编译选项" tabindex="-1"><a class="header-anchor" href="#_3、编译选项"><span>3、编译选项</span></a></h2><h3 id="_3-1、-自动编译文件" tabindex="-1"><a class="header-anchor" href="#_3-1、-自动编译文件"><span>3.1、 自动编译文件</span></a></h3><ol><li><p>在编译某个ts文件时，在文件名之后使用 -w 指令后，TS编译器会启动监测模式自动监视文件的变化，并在文件发生变化时对文件进行重新编译。（有点像vue-cli 里面 npm run serve 启动服务一样的监测方式）</p></li><li><p>示例：</p><ul><li><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-powershell"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tsc xxx.ts </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">w</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="_3-2、-自动编译整个项目" tabindex="-1"><a class="header-anchor" href="#_3-2、-自动编译整个项目"><span>3.2、 自动编译整个项目</span></a></h3><ul><li><p>如果我们直接在命令行使用tsc指令，理论上我们可以使编译器自动将当前项目下的所有ts文件编译为js文件。</p></li><li><p>但是直接使用tsc命令之前，我们要先在项目根目录下创建一个ts的配置文件 tsconfig.json 才可以实现上述操作。</p></li><li><p>tsconfig.json是一个JSON文件，添加配置文件后，只需直接使用 tsc 命令即可完成对整个项目的编译</p></li></ul><h4 id="_3-2-1、-配置选项" tabindex="-1"><a class="header-anchor" href="#_3-2-1、-配置选项"><span>3.2.1、 配置选项</span></a></h4><ol><li><h5 id="include" tabindex="-1"><a class="header-anchor" href="#include"><span>include</span></a></h5><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：[&quot;**/*&quot;]</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;include&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;src/**/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tests/**/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p></li></ul></li></ul></li><li><h5 id="exclude" tabindex="-1"><a class="header-anchor" href="#exclude"><span>exclude</span></a></h5><ul><li><p>定义需要排除在外的目录</p></li><li><p>默认值：[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;exclude&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./src/hello/**/*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>上述示例中，src下hello目录下的文件都不会被编译</p></li></ul></li></ul></li><li><h5 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>extends</span></a></h5><ul><li><p>定义被继承的配置文件</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;extends&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./configs/base&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li></ul></li></ul></li><li><h5 id="files-不常用" tabindex="-1"><a class="header-anchor" href="#files-不常用"><span>files（不常用）</span></a></h5><ul><li><p>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;files&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;core.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;sys.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;types.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;scanner.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;parser.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;utilities.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;binder.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;checker.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;tsc.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>列表中的文件都会被TS编译器所编译</p></li></ul></li></ul></li><li><h5 id="compileroptions-重要" tabindex="-1"><a class="header-anchor" href="#compileroptions-重要"><span>compilerOptions（重要！）</span></a></h5><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p></li><li><p>项目选项如下:</p></li></ul><ol><li><strong>target</strong></li></ol><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3 (默认)、 ES5、ES6、ES2015、ES2016、ES2017、ES2018、ES2019、ES2020、ES2021、ES2022、ESNext</li></ul></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ES6&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p></li></ul></li></ul><ol start="2"><li><strong>lib</strong></li></ol><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>一般情况下不需要修改这个选项，除非运行环境不是在浏览器中(比如node.js)才需要修改</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......</li></ul></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;lib&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ES6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DOM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><ol start="3"><li><strong>module</strong></li></ol><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、AMD、System、UMD、ES6、ES2015、ES2020、ESNext、None、ES2022、Node16、NodeNext</li></ul></li><li><p>示例：</p><ul><li><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;module&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;CommonJS&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><ol start="4"><li><strong>outDir</strong></li></ol><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;outDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置后编译后的js文件将会生成到dist目录</p></li></ul></li></ul><ol start="5"><li><strong>outFile (用的不多)</strong></li></ol><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的<strong>编写在全局作用域中</strong>的代码合并为一个js文件，只有module中设置了编译后代码使用的模块化系统为None、System或AMD才有可能会将模块一起合并到文件之中，否则会报错。具体因选项而异</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;outFile&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist/app.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><ol start="6"><li><strong>rootDir</strong></li></ol><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><ul><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;rootDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./src&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><ol start="7"><li><strong>allowJs</strong></li></ol><ul><li>是否对js文件编译</li></ul><ol start="8"><li><strong>checkJs</strong></li></ol><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p></li><li><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;compilerOptions&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">     &quot;allowJs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">     &quot;checkJs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="9"><li><strong>removeComments</strong></li></ol><ul><li>是否删除注释</li><li>默认值：false</li></ul><p>10.1 <strong>noEmit</strong></p><ul><li>无论代码是否有错误都不生成编译后文件</li><li>默认值：false</li></ul><p>10.2 <strong>noEmitOnError</strong></p><ul><li><p>当代码有错误时不生成编译后文件</p></li><li><p>默认值：false</p></li></ul><ol start="11"><li><strong>sourceMap</strong></li></ol><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul><hr><ol start="12"><li><p><strong>严格语法检查</strong></p><p>注：以下选项除特殊标注外，所有的默认值皆为：false</p></li></ol><ul><li><p>strict</p><ul><li>启用所有的严格语法检查，默认值为true，设置为true后相当于开启了所有的严格检查</li></ul></li><li><p>alwaysStrict</p><ul><li>用于设置编译后的文件是否使用严格模式</li><li>注：当代码块内有引用模块操作时，编译后的文件会自动使用严格模式</li></ul></li><li><p>noImplicitAny</p><ul><li>禁止隐式的any类型</li></ul></li><li><p>noImplicitThis</p><ul><li>禁止类型不明确的this</li><li>开启之后，函数中需要指定this（Window或者某个函数体等）</li></ul></li><li><p>strictBindCallApply</p><ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li><p>strictFunctionTypes</p><ul><li>严格检查函数的类型</li></ul></li><li><p>strictNullChecks</p><ul><li>严格的空值检查</li></ul></li><li><p>strictPropertyInitialization</p><ul><li>严格检查属性是否初始化</li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch <ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns <ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals <ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters <ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode <ul><li>检查不可达代码</li><li>可选值： <ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li></ul></li></ul></li></ol>`,7)])])}const d=s(n,[["render",t]]),o=JSON.parse('{"path":"/learningNote/TypeScriptNote/%E7%AC%AC%E4%BA%8C%E5%A4%A9.html","title":"TypeScript第二天 配置编译选项","lang":"zh-CN","frontmatter":{"title":"TypeScript第二天 配置编译选项","icon":"typescript","date":"2022-09-11T00:00:00.000Z","category":["TypeScript","Web"]},"git":{"createdTime":1692892792000,"updatedTime":1693300529000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":3}]},"readingTime":{"minutes":4.34,"words":1301},"filePathRelative":"learningNote/TypeScriptNote/第二天.md","excerpt":"<h2>3、编译选项</h2>\\n<h3>3.1、 自动编译文件</h3>\\n<ol>\\n<li>\\n<p>在编译某个ts文件时，在文件名之后使用 -w 指令后，TS编译器会启动监测模式自动监视文件的变化，并在文件发生变化时对文件进行重新编译。（有点像vue-cli 里面 npm run serve 启动服务一样的监测方式）</p>\\n</li>\\n<li>\\n<p>示例：</p>\\n<ul>\\n<li>\\n<div class=\\"language-powershell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"powershell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-powershell\\"><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">tsc xxx.ts </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">-</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">w</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>"}');export{d as comp,o as data};

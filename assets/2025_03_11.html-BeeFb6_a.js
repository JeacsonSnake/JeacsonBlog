import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,a as p,d as n,e as l,w as r,r as m,o}from"./app-CM1hd37A.js";const c={};function h(g,s){const t=m("RouteLink");return o(),i("div",null,[s[3]||(s[3]=a("h2",{id:"简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#简介"},[a("span",null,"简介")])],-1)),a("p",null,[s[1]||(s[1]=n("在之前的",-1)),l(t,{to:"/learningNote/Ros2_Note/co_me/"},{default:r(()=>[...s[0]||(s[0]=[n("核心内容",-1)])]),_:1}),s[2]||(s[2]=n("中，我们系统地学习了四种通信机制。这四种通信机制在当时的应用场景都为单个ROS设备内相关节点、话题之间的相互沟通。那么当我们涉及到多台 ROS2 设备之间的相互通信时，我们应该如何实现？",-1))]),s[4]||(s[4]=p('<h2 id="分布式通信" tabindex="-1"><a class="header-anchor" href="#分布式通信"><span>分布式通信</span></a></h2><p>分布式通信就是这样一种 <strong>通过网络</strong> 在不同主机之间实现 <strong>数据交互</strong> 的通信策略。</p><p>首先我们应该了解， ROS2 本身就是一个分布式通信框架，它可以通过中间件很方便的实现不同设备之间的通信。</p><p>ROS2 所基于的中间件为<strong>数据分发服务（Data Distribution Service, 简称DDS）</strong>，当多台 ROS2 设备处于同一网络时，通过 DDS 的 <strong>域ID机制(ROS_DOMAIN_ID)</strong> 便可以实现分布式通信。其大致流程为：</p><ul><li>在启动节点之前设置 <strong>域ID</strong> 的值</li><li>当不同的节点间 <strong>域ID</strong> 的值相同时，则可以被互相发现并进行通信。</li><li>反之，当不同的节点间 <strong>域ID</strong> 的值不同时，则无法实现上述功能。</li><li>当然由于在默认情况下，所有的节点在启动时所使用的 <strong>域ID</strong> 的值皆为 <strong>“0”</strong>，因此只要在同一网络下，不需要针对 <strong>域ID</strong> 的值做任何配置，在理论上节点间就已经在进行分布式通信了。</li></ul><h2 id="它的应用场景是" tabindex="-1"><a class="header-anchor" href="#它的应用场景是"><span>它的应用场景是？</span></a></h2><p>有许多数据交互的应用场景都依赖于分布式通信。例如：</p><ul><li>无人机编队、机器人编队等，作为单个机器人需要获取周边机器人的速度、位置、运行轨迹等等相关的信息。</li><li>远程控制机器人等时，可能需要获取该机器人所采集的环境信息，并下发相关的控制指令。</li><li>其他未提及但是是在多设备之间进行数据交互的应用场景等</li></ul><h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现"><span>如何实现？</span></a></h2><p>在多机通信时，可以通过 <strong>域ID</strong> 对节点进行分组，同一个组内的节点之间可以实现自由通信，而不同组之间的节点就无法进行相互通信。如果你希望所有节点都属于同一个组，那么直接使用默认的 域ID 即可。如果希望将不同的节点之间划分为多个组，那么可以在终端启动该节点前，<strong>在终端内设置</strong> 该节点的 域ID (例如设置为6)。具体执行命令为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ROS_DOMAIN_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上述命令后，在该终端内启动的该节点就会被划分到 域ID 为 6 的域内。</p><p><a href="./assets/setting_domain_ID.png">域ID运行演示</a></p><p>如果希望将当前ROS2所在设备下的 <strong>所有节点</strong> 设置统一的 域ID，那么你可以在终端内执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;export ROS_DOMAIN_ID=6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">~/.bashrc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行完毕后再 <strong>重新启动终端</strong>，那么之后 <strong>该设备内</strong> 所运行的 <strong>所有节点</strong> 将自动的被划分到 域ID 为 6 的域内。</p><h2 id="⚠注意事项⚠" tabindex="-1"><a class="header-anchor" href="#⚠注意事项⚠"><span>⚠注意事项⚠</span></a></h2><p>在设置 ROS_DOMAIN_ID 的时候应遵守以下事项：</p><ul><li>建议 ROS_DOMAIN_ID 的取值在 <strong>[0,101]</strong> 之间；</li><li>每个 ROS_DOMAIN_ID 内的节点总数是有限制的，节点总数需要小于等于 <strong>120</strong>；</li><li>如果 ROS_DOMAIN_ID 等于 <em>101</em>， 则该 域ID 内的节点总数是有更大限制，节点总数需要小于等于 <strong>54</strong> 。</li></ul><p>究其原因是由于以下两个计算规则👇仅供了解。<strong>(反正你遵守这个注意事项就不会有啥问题，真想知道为什么再往下看)</strong></p><hr><h3 id="_1-dds-内-ros-domain-id-的计算规则" tabindex="-1"><a class="header-anchor" href="#_1-dds-内-ros-domain-id-的计算规则"><span>1. DDS 内 ROS_DOMAIN_ID 的计算规则</span></a></h3><ol><li>DDS 是基于 TCP/IP 或者 UDP/IP 网络通信协议的，网络通信时需要指定端口号。该端口号由2个字节 （即 2*8=16 bit）的无符号整数表示，其取值范围在 [0, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{16}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>]，即[0,65535] 之间；</li><li>端口号的分配亦遵循相应规则，根据 DDS 协议规定，以 7400 作为起始端口，因此可用端口缩小为 [7400,65535]。并且由于 DDS 协议在默认情况下，每个 ROS_DOMAIN_ID 都需要占用 250 个端口，因此 ROS_DOMAIN_ID 的个数为： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mn>16</mn></msup><mo>−</mo><mn>7400</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>250</mn><mo>≈</mo><mn>232</mn></mrow><annotation encoding="application/x-tex">(2^{16}-7400)/250\\approx232</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7400</span><span class="mclose">)</span><span class="mord">/250</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">232</span></span></span></span> ，对应的取值范围为[0,231];</li><li>不同的操作系统会预留不同的端口，在 DDS 中使用端口时还需要避开这些预留的端口，以免产生使用冲突。在 Linux 下 可以使用的 ROS_DOMAIN_ID 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>101</mn><mo stretchy="false">]</mo><mo>∪</mo><mo stretchy="false">[</mo><mn>215</mn><mo separator="true">,</mo><mn>231</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,101]\\cup[215,231]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">101</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">215</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">231</span><span class="mclose">]</span></span></span></span> ，在 Windows &amp; Mac 中可用的域为 [0,166]。因此综上，为了兼容多平台，<strong>建议</strong> ROS_DOMAIN_ID 的取值在 [0,101] 之间。</li></ol><h3 id="_2-ros-domain-id-内的节点总数的计算规则" tabindex="-1"><a class="header-anchor" href="#_2-ros-domain-id-内的节点总数的计算规则"><span>2. ROS_DOMAIN_ID 内的节点总数的计算规则</span></a></h3><ol><li>每一个 DOMAIN_ID 默认需要占用 <strong>250 个端口</strong>，在这 250 个端口内，每一个 ROS2 节点都需要占用 <strong>两个</strong> 端口。</li><li>在DDS 协议中定义，每一个 DOMAIN_ID 的端口段内，第一个和第二个端口分别为 Discovery Multicast 端口和 User Multicast 端口，并且 DOMAIN_ID 内的第一个节点是从端口段内的 <strong>第十个端口</strong> 开始使用的，即第十个和第十一个端口分别为第一个节点所使用的 Discovery Unicast 端口和 User Unicast 端口，第十二个和第十三个端口分别为第二个节点所使用的 Discovery Unicast 端口和 User Unicast 端口，以此类推。</li><li>因此一个 DOMAIN_ID 内所能使用的最大节点个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>250</mn><mo>−</mo><mn>10</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>=</mo><mn>120</mn></mrow><annotation encoding="application/x-tex">(250-10)/2=120</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">250</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10</span><span class="mclose">)</span><span class="mord">/2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">120</span></span></span></span> 个</li><li>当 DOMAIN_ID 值为 101 时，由于其后半段端口为操作系统的预留端口，因此在该 DOMAIN_ID 下，其节点的最大个数为 54 个。</li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>若希望在文档中参考具体计算公式，请参考以下网址：<a href="https://community.rti.com/content/forum-topic/statically-configure-firewall-let-omg-dds-traffic-through" target="_blank" rel="noopener noreferrer">Statically configure a Firewall to let OMG DDS Traffic through | Data Distribution Service (DDS) Community RTI Connext Users</a> 注：该网站为全英文</p></div>',26))])}const u=e(c,[["render",h]]),_=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me_2/2025_03_11.html","title":"ROS2-008-通信机制补完：分布式通信和 ROS_DOMAIN_ID","lang":"zh-CN","frontmatter":{"title":"ROS2-008-通信机制补完：分布式通信和 ROS_DOMAIN_ID","icon":"structure","date":"2025-03-11T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1741678146000,"updatedTime":1741678146000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":1}]},"readingTime":{"minutes":5,"words":1500},"filePathRelative":"learningNote/Ros2_Note/co_me_2/2025_03_11.md","excerpt":"<h2>简介</h2>\\n<p>在之前的<a href=\\"/learningNote/Ros2_Note/co_me/\\" target=\\"_blank\\">核心内容</a>中，我们系统地学习了四种通信机制。这四种通信机制在当时的应用场景都为单个ROS设备内相关节点、话题之间的相互沟通。那么当我们涉及到多台 ROS2 设备之间的相互通信时，我们应该如何实现？</p>\\n<h2>分布式通信</h2>\\n<p>分布式通信就是这样一种 <strong>通过网络</strong> 在不同主机之间实现 <strong>数据交互</strong> 的通信策略。</p>\\n<p>首先我们应该了解， ROS2 本身就是一个分布式通信框架，它可以通过中间件很方便的实现不同设备之间的通信。</p>"}');export{u as comp,_ as data};

import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,b as l,d as i,e as n,w as r,r as c,o as d}from"./app-CM1hd37A.js";const p={};function h(g,e){const a=c("RouteLink");return d(),o("div",null,[e[2]||(e[2]=t('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>上一章内容，我们学习了ROS2中的多种通信机制，了解了不同通信模型的实现流程、相关API以及各自的特点。在实际开发当中，我们可能会遇到一些问题：</p><ol><li>一个完整的机器人系统启动之后，其组成是比较复杂的，可能包含十几个、几十个甚至上百个节点，不同的节点可能又包含一个或多个通信对象(话题发布方、话题订阅方、服务端、客户端、动作服务端、动作客户端、参数服务端、参数客户端)，通信时还需要使用到各种各样的msg、srv或action接口消息，那么在开发过程中，如何才能方便的获取这些节点、话题、服务、动作、参数以及接口相关的信息呢？</li><li>编写通信实现，通信至少涉及到双方，一方编写完毕后，如何验证程序是否可以正常运行呢？</li><li>话题通信过程中，发布方程序中设置了消息的发布频率，如何判断实际运行中的发布频率是否和设置的频率一致呢？</li><li>......</li></ol><p>ROS2 提供了一些工具可以方便快捷的解决上述问题，并且实际上在当时学习的过程中，我们也有使用过这些工具进行相应的调试操作。在这里我们会对其进行更加系统的阐述。</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>在ROS2中，通信机制相关的工具有两种类型：</p><ul><li>命令行工具</li><li>图形化工具（rqt）</li></ul><p>命令行工具是一系列 <strong>终端命令</strong> 的集合，而图形化工具则是 ROS2 基于 <strong>QT框架</strong>，针对 <em>机器人</em> 开发的一系列 <strong>可视化工具</strong> 的集合。通过使用这些工具，我们可以更方便的实现程序调试，提高开发效率，优化用户体验。</p><h2 id="一、命令行工具" tabindex="-1"><a class="header-anchor" href="#一、命令行工具"><span>一、命令行工具</span></a></h2><p>ROS2中常用的命令如下：</p><ul><li>ros2 node：<strong>节点相关</strong> 命令行工具</li><li>ros2 interface：<strong>接口(msg、srv、action)消息相关</strong> 的命令行工具</li><li>ros2 topic：<strong>话题通信相关</strong> 的命令行工具</li><li>ros2 service：<strong>服务通信相关</strong> 的命令行工具</li><li>ros2 action：<strong>动作通信相关</strong> 的命令行工具</li><li>ros2 param：<strong>参数服务相关</strong> 的命令行工具</li></ul><p>关于命令的使用一般都会提供内置的帮助文档，帮助文档的获取方式如下：</p><p>可以通过在命令后添加参数 <code>-h</code> 或 参数 <code>--help</code> 的方式查看相应的命令帮助文档，比如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而命令下参数的使用也同样可以通过添加参数 <code>-h</code> 或参数 <code>--help</code> 的方式查看相应的帮助文档，比如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">务必活用参数文档！</p><p>这里所介绍的命令行工具并不会覆盖到所有内容，如果对某个比较细节的指令不太了解，可以直接在命令行工具内或者官方文档内查看相应的帮助文档以进行参考。</p></div><h3 id="_1-ros2-node" tabindex="-1"><a class="header-anchor" href="#_1-ros2-node"><span>1.ros2 node</span></a></h3><p><code>ros2 node</code> 的基本使用语法如下：</p><ul><li><code>info</code> Output information about a node | 输出 node 信息</li><li><code>list</code> Output a list of avaliable nodes | 输出运行中的 node 列表</li></ul><h3 id="_2-ros2-interface" tabindex="-1"><a class="header-anchor" href="#_2-ros2-interface"><span>2.ros2 interface</span></a></h3><p><code>ros2 interface</code> 的基本使用语法如下：</p><ul><li><code>list</code> List all interface types avaliable | 输出所有可用的 interface 消息</li><li><code>package</code> Output a list of avaliable interface types within one package | 输出指定功能包下可提供的 interface 类型列表</li><li><code>packages</code> Output a list of packages that provide interfaces | 输出包含 interface 消息的功能包列表</li><li><code>proto</code> Output an interface prototype | 输出 interface 消息原型</li><li><code>show</code> Output the interface definition | 输出 interface 消息定义格式</li></ul><h3 id="_3-ros2-topic" tabindex="-1"><a class="header-anchor" href="#_3-ros2-topic"><span>3.ros2 topic</span></a></h3><p><code>ros2 topic</code> 的基本使用语法如下：</p><ul><li><code>bw</code> Display bandwidth used by topic | 输出话题在消息传输中所占用的带宽</li><li><code>delay</code> Display delay of topic from timestamp in header | 输出从 header 的时间戳内获取到的主题延迟时间</li><li><code>echo</code> Output messages from a topic | 输出指定话题下的消息</li><li><code>hz</code> Print the average publishing rate to screen | 输出消息的平均发布速率</li><li><code>info</code> Print information about a topic | 输出指定 topic 的相关信息</li><li><code>list</code> Output a list of avaliable topics | 输出所有可用（运行中）topic 的列表</li><li><code>pub</code> Publish a message to a topic | 将指定消息发布给指定话题</li><li><code>type</code> Print a topic&#39;s type | 输出 topic所使用的接口类型</li></ul><h3 id="_4-ros2-service" tabindex="-1"><a class="header-anchor" href="#_4-ros2-service"><span>4.ros2 service</span></a></h3><p><code>ros2 service</code> 的基本使用语法如下：</p><ul><li><code>call</code> Call a service | 向特定 service 发送请求/调用相关 service</li><li><code>echo</code> Echo a service | 实时显示 service 在被调用时服务器所返回的响应数据</li><li><code>find</code> Output a list of avaliable service of a given type | 输出给定 type 下可用的 service 列表</li><li><code>info</code> Print information about a service | 输出指定 service 的相关信息</li><li><code>list</code> Output a list of avaliable services | 输出所有可用（运行中）service 的列表及其 type</li><li><code>type</code> Print a service&#39;s type | 输出 service 所使用的接口类型</li></ul><h3 id="_5-ros2-action" tabindex="-1"><a class="header-anchor" href="#_5-ros2-action"><span>5.ros2 action</span></a></h3><p><code>ros2 action</code> 的基本使用语法如下：</p><ul><li><code>info</code> Print information about an action | 输出指定 action 的相关信息</li><li><code>list</code> Output a list of action names | 输出所有可用（运行中） action 的列表</li><li><code>send_goal</code> Send an action goal | 向特定 action 发送请求/调用相关 action</li><li><code>type</code> Print an action&#39;s type | 输出 action 所使用的接口类型</li></ul><h3 id="_6-ros2-param" tabindex="-1"><a class="header-anchor" href="#_6-ros2-param"><span>6.ros2 param</span></a></h3><p><code>ros2 param</code> 的基本使用语法如下：</p><ul><li><code>delete</code> Delete parameter | 删除 parameter</li><li><code>describe</code> Show descriptive information about declared parameters | 输出 parameter 的描述信息</li><li><code>dump</code> Show all of the parameters of a node in a YAML file format | 将 node parameter 以 YAML 格式写入磁盘文件</li><li><code>get</code> Get parameter | 获得指定 parameter</li><li><code>list</code> Output a list of avaliable parameters | 输出所有可用（运行中） parameter 的列表</li><li><code>load</code> Load parameter file for a node | 从磁盘文件中加载 parameter 至 node</li><li><code>set</code> Set parameter | 设置 parameter</li></ul><hr>',40)),l("p",null,[e[1]||(e[1]=i("下半部分见",-1)),n(a,{to:"/learningNote/Ros2_Note/co_me_2/2025_04_13.html"},{default:r(()=>[...e[0]||(e[0]=[i("ROS2-014-通信机制补完：通信机制工具（二）图形化工具（rqt）与总结",-1)])]),_:1})])])}const m=s(p,[["render",h]]),b=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me_2/2025_04_12.html","title":"ROS2-014-通信机制补完：通信机制工具（一）综述与命令行工具","lang":"zh-CN","frontmatter":{"title":"ROS2-014-通信机制补完：通信机制工具（一）综述与命令行工具","icon":"envelopes-bulk","date":"2025-04-12T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1744445278000,"updatedTime":1744445278000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":1}]},"readingTime":{"minutes":5.02,"words":1507},"filePathRelative":"learningNote/Ros2_Note/co_me_2/2025_04_12.md","excerpt":"<h2>简介</h2>\\n<p>上一章内容，我们学习了ROS2中的多种通信机制，了解了不同通信模型的实现流程、相关API以及各自的特点。在实际开发当中，我们可能会遇到一些问题：</p>\\n<ol>\\n<li>一个完整的机器人系统启动之后，其组成是比较复杂的，可能包含十几个、几十个甚至上百个节点，不同的节点可能又包含一个或多个通信对象(话题发布方、话题订阅方、服务端、客户端、动作服务端、动作客户端、参数服务端、参数客户端)，通信时还需要使用到各种各样的msg、srv或action接口消息，那么在开发过程中，如何才能方便的获取这些节点、话题、服务、动作、参数以及接口相关的信息呢？</li>\\n<li>编写通信实现，通信至少涉及到双方，一方编写完毕后，如何验证程序是否可以正常运行呢？</li>\\n<li>话题通信过程中，发布方程序中设置了消息的发布频率，如何判断实际运行中的发布频率是否和设置的频率一致呢？</li>\\n<li>......</li>\\n</ol>"}');export{m as comp,b as data};

import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as h,b as i,d as e,e as n,w as l,r as d,o as p}from"./app-CM1hd37A.js";const k={};function o(c,s){const a=d("RouteLink");return p(),t("div",null,[s[5]||(s[5]=h(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><strong>参数（Parameters）</strong> 是 ROS2 中用于节点<strong>运行时动态配置</strong>的键值对（Key-Value）存储机制。参数并不需要中心化的仓库用于存储信息，其直接被归属于节点本身。参数允许通过服务接口在该节点运行期间读写其内部相关配置，而无需修改代码或重启该节点。与话题通信（Topics）和服务通信（Services）不同，参数的交互本质是 <strong>对节点内部状态的访问与控制</strong>，而非单纯的节点间数据流通。</p><p>具体而言：</p><ul><li>参数直接存储在<strong>节点内部</strong>，每个节点维护独立的参数列表，通过命名空间（例如 <code>/control_node/max_speed</code>）进行隔离。</li><li>参数通过 ROS2 内置的<strong>参数服务接口</strong>（如 <code>/get_parameters</code> 和 <code>/set_parameters</code> 等）访问，其访问逻辑底层依赖于 ROS2 服务通信（Services）机制。</li><li>同一节点内的参数可被多个外部对象（如 CLI 工具、其他节点、RQT 界面等）同时访问，形成 <strong>单服务端（节点）对 多客户端</strong> 的交互模式。</li></ul><p><strong>参数（Parameters）</strong> 在节点中一般用于调整算法参数（如 PID 控制器的比例系数）、传感器阈值（如摄像头曝光时间）或操作模式（如调试模式开关）。当然，你可以通过脚本批量修改多个节点的参数（如同时设置所有激光雷达的扫描频率）以实现特殊操作。并且在实际应用中，将参数保存为 YAML 文件，可以在代码部署时通过调用该文件快速将节点内的配置恢复为 YAML 文件内的预设配置。</p><h2 id="参数服务的命令行访问" tabindex="-1"><a class="header-anchor" href="#参数服务的命令行访问"><span>参数服务的命令行访问</span></a></h2><p>在一个 ROS2 程序运行时，你可以在<strong>命令行窗口</strong>中使用指令对运行中节点内的 Parameters 进行查看、修改等。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">related</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> comman</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看节点内拥有的-parameters" tabindex="-1"><a class="header-anchor" href="#查看节点内拥有的-parameters"><span>查看节点内拥有的 Parameters</span></a></h3><p>在一个 ROS2 程序运行时，你可以使用 <code>list</code> 查看该程序内所有节点下的所有 Parameters。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在输出中，你可以看到以下结构（以 turtlesim package 运行时的相关输出为例子）：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>    /teleop_turtle:</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.depth</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.durability</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.history</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.reliability</span></span>
<span class="line"><span>        scale_angular</span></span>
<span class="line"><span>        scale_linear</span></span>
<span class="line"><span>        use_sim_time</span></span>
<span class="line"><span>    /turtlesim:</span></span>
<span class="line"><span>        background_b</span></span>
<span class="line"><span>        background_g</span></span>
<span class="line"><span>        background_r</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.depth</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.durability</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.history</span></span>
<span class="line"><span>        qos_overrides./parameter_events.publisher.reliability</span></span>
<span class="line"><span>        use_sim_time</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>/teleop_turtle</code> 是节点名</li><li>节点名下的皆为其携带的 Parameters</li><li>在所有 Parameters 中，<code>use_sim_time</code> 为所有节点都拥有的一种 Parameters。</li></ul><h3 id="获取某一节点内某一-parameters-的值" tabindex="-1"><a class="header-anchor" href="#获取某一节点内某一-parameters-的值"><span>获取某一节点内某一 Parameters 的值</span></a></h3><p>在一个 ROS2 程序运行时，你可以使用 <code>get</code> 获取运行程序中某一节点内某一 Parameters 的值.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">parameter_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，当你希望找到节点 <code>node_a</code> 中的 Parameters <code>height</code> 的值时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node_a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> height</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它会返回：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Integer value is: 186</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样你既可以知道其数据的值，也同时知道了其数据的类型。</p><h3 id="在程序运行时修改某一节点内某一-parameters-的值" tabindex="-1"><a class="header-anchor" href="#在程序运行时修改某一节点内某一-parameters-的值"><span>在程序运行时修改某一节点内某一 Parameters 的值</span></a></h3><p>在一个 ROS2 程序运行时，你可以使用 <code>set</code> 修改运行程序中某一节点内某一 Parameters 的值.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">parameter_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">valu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，当你希望将节点 <code>node_a</code> 中的 Parameters <code>height</code> 的值修改为 <code>168</code> 时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node_a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> height</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 168</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当其修改成功，它会弹出以下信息：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Set parameter successful</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="在程序运行时输出某一节点内所有-parameters-的值" tabindex="-1"><a class="header-anchor" href="#在程序运行时输出某一节点内所有-parameters-的值"><span>在程序运行时输出某一节点内所有 Parameters 的值</span></a></h3><p>在一个 ROS2 程序运行时，你可以使用 <code>dump</code> 输出某一节点内所有 Parameters 的值.</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dump</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，当你希望输出节点 <code>node_a</code> 中所有 Parameters 的值时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dump</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node_a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它会在命令行窗口弹出包含以下声明的信息：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>/node_a:</span></span>
<span class="line"><span>    ros__parameters:</span></span>
<span class="line"><span>        height: 168</span></span>
<span class="line"><span>        use_sim_time: false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些信息是该节点现在在运行时所拥有的 Parameters 数据，如果之前有进行过修改，这里会相对应的体现。当然，如果你希望保存为其他文件进行浏览，那么你可以将其保存至 <code>YAML 文件</code> 内。</p><p>例如，当你希望将节点 <code>node_a</code> 中所有 Parameters 的值输出至 <code>YAML 文件</code> 时，你可以执行如下代码：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dump</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_a.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令执行后，ROS2 会在你的命令行所运行的文件夹路径下生成一个名称为 <code>node_a.yaml</code> 的文件。里面包括了之前输出至命令行窗口的所有信息。</p><h3 id="在程序运行时将文件内的-parameters-加载入运行中的节点" tabindex="-1"><a class="header-anchor" href="#在程序运行时将文件内的-parameters-加载入运行中的节点"><span>在程序运行时将文件内的 Parameters 加载入运行中的节点</span></a></h3><p>如果你希望将之前所保存的 Parameters 文件加载入运行中的对应节点，你可以在该节点重新运行时使用 <code>load</code> 进行加载。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">node_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">parameter_fil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，当你希望将节点 <code>node_a</code> 中所有 Parameters 的值输出至 <code>YAML 文件</code> 时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> param</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> load</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /node_a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node_a.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你应该会得到拥有以下声明的回执：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>    Set parameter height successful</span></span>
<span class="line"><span>    Set parameter use_sim_time successful</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后你可能会遇到出现以下回执的情况：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>    Set parameter background_b successful</span></span>
<span class="line"><span>    Set parameter background_g successful</span></span>
<span class="line"><span>    Set parameter background_r successful</span></span>
<span class="line"><span>    Set parameter qos_overrides./parameter_events.publisher.depth failed: parameter &#39;qos_overrides./parameter_events.publisher.depth&#39; cannot be set because it is read-only</span></span>
<span class="line"><span>    Set parameter qos_overrides./parameter_events.publisher.durability failed: parameter &#39;qos_overrides./parameter_events.publisher.durability&#39; cannot be set because it is read-only</span></span>
<span class="line"><span>    Set parameter qos_overrides./parameter_events.publisher.history failed: parameter &#39;qos_overrides./parameter_events.publisher.history&#39; cannot be set because it is read-only</span></span>
<span class="line"><span>    Set parameter qos_overrides./parameter_events.publisher.reliability failed: parameter &#39;qos_overrides./parameter_events.publisher.reliability&#39; cannot be set because it is read-only</span></span>
<span class="line"><span>    Set parameter use_sim_time successful</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在里面有一些 Parameters 是只读的参数，这些只读参数只能在节点启动时修改，不能在启动后修改，这就是为什么 “qos_overrides” 相关的参数会出现一些警告。</p><h3 id="在程序运行开始时将文件内的-parameters-加载入即将运行的节点" tabindex="-1"><a class="header-anchor" href="#在程序运行开始时将文件内的-parameters-加载入即将运行的节点"><span>在程序运行开始时将文件内的 Parameters 加载入即将运行的节点</span></a></h3><p>如果你希望在程序运行开始时加载文件内的 Parameters，你可以在运行 ros2 程序时同时使用 <code>--ros-args</code> 和 <code>--params-file</code> 两个指示变量，来告诉 ROS2 你希望使用这个文件作为运行节点内 Parameters 的值。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">package_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">executable_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--ros-args</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --params-file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>当你使用这个方法更新 Parameters 时，包括只读 Parameters 在内的所有相关 Parameters 都会得到更新。</p></div><h2 id="参数服务的简单实现" tabindex="-1"><a class="header-anchor" href="#参数服务的简单实现"><span>参数服务的简单实现</span></a></h2><p>当你使用自定义节点时，你可能会需要 Parameters。现在我们针对以下案例，通过使用 C++ 与 Python 进行分别实现，以更加深入了解参数服务。</p><h3 id="案例需求-案例分析" tabindex="-1"><a class="header-anchor" href="#案例需求-案例分析"><span>案例需求&amp;案例分析</span></a></h3><p>需求：有两个节点，请编写参数服务，在参数服务端（节点A）中设置一些参数，使参数客户端（节点B）可以通过访问参数服务端（节点A）对这些参数实现查看与修改，并且参数服务端（节点A）自身可以对此进行增删改查。</p><p>分析：在上述需求中，我们需要关注以下三个要素：</p><ol><li>参数服务端；</li><li>参数客户端；</li><li>参数本身。</li></ol><h3 id="流程简介" tabindex="-1"><a class="header-anchor" href="#流程简介"><span>流程简介</span></a></h3><p>案例实现前需要先了解ROS2中参数的相关API，无论是客户端还是服务端都会使用到参数，而参数服务案例实现主要步骤如下：</p><ol><li>编写参数服务端实现；</li><li>编写参数客户端实现；</li><li>编辑配置文件；</li><li>编译；</li><li>执行。</li></ol><p>案例会采用 C++ 和 Python 分别实现，且二者都遵循上述实现流程。</p><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h3><p>终端下创建工作空间：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws01_plumbing/src</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ws01_plumbing/src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入工作空间的src目录:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调用如下两条命令分别创建C++功能包、Python功能包及其所需服务端节点:</p><p><strong>C++:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp04_parameter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclcpp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --node-name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo01_parameter_server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Python:</strong></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> py04_parameter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --build-type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ament_python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dependencies</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rclpy</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --node-name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo01_parameter_server_py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>准备工作到此完毕。</p><hr>`,77)),i("p",null,[s[2]||(s[2]=e("接下来你便可以通过 ",-1)),n(a,{to:"/learningNote/Ros2_Note/co_me/2025_03_06.html"},{default:l(()=>[...s[0]||(s[0]=[e("C++",-1)])]),_:1}),s[3]||(s[3]=e(" 和 ",-1)),n(a,{to:"/learningNote/Ros2_Note/co_me/2025_03_07.html"},{default:l(()=>[...s[1]||(s[1]=[e("Python",-1)])]),_:1}),s[4]||(s[4]=e(" 来分别实现参数服务了。",-1))]),s[6]||(s[6]=i("h2",{id:"总结",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#总结"},[i("span",null,"总结")])],-1)),s[7]||(s[7]=i("p",null,"在这一节中，我们系统的阐述了参数服务。通过依据参数服务的相关原理自行操作，实现了节点参数服务的创建与使用。这一章节为止，我们就已经简单介绍完了四种通信方式，望能够提供参考。",-1))])}const b=r(k,[["render",o]]),u=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me/2024_11_27.html","title":"ROS2-007-通信机制：参数服务","lang":"zh-CN","frontmatter":{"title":"ROS2-007-通信机制：参数服务","icon":"warehouse","date":"2025-02-28T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1741170160000,"updatedTime":1741599203000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":3}]},"readingTime":{"minutes":6.72,"words":2016},"filePathRelative":"learningNote/Ros2_Note/co_me/2024_11_27.md","excerpt":"<h2>简介</h2>\\n<p><strong>参数（Parameters）</strong> 是 ROS2 中用于节点<strong>运行时动态配置</strong>的键值对（Key-Value）存储机制。参数并不需要中心化的仓库用于存储信息，其直接被归属于节点本身。参数允许通过服务接口在该节点运行期间读写其内部相关配置，而无需修改代码或重启该节点。与话题通信（Topics）和服务通信（Services）不同，参数的交互本质是 <strong>对节点内部状态的访问与控制</strong>，而非单纯的节点间数据流通。</p>\\n<p>具体而言：</p>\\n<ul>\\n<li>参数直接存储在<strong>节点内部</strong>，每个节点维护独立的参数列表，通过命名空间（例如 <code>/control_node/max_speed</code>）进行隔离。</li>\\n<li>参数通过 ROS2 内置的<strong>参数服务接口</strong>（如 <code>/get_parameters</code> 和 <code>/set_parameters</code> 等）访问，其访问逻辑底层依赖于 ROS2 服务通信（Services）机制。</li>\\n<li>同一节点内的参数可被多个外部对象（如 CLI 工具、其他节点、RQT 界面等）同时访问，形成 <strong>单服务端（节点）对 多客户端</strong> 的交互模式。</li>\\n</ul>"}');export{b as comp,u as data};

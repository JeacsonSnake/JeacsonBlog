import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as i,o as n}from"./app-CM1hd37A.js";const t={};function r(h,a){return n(),s("div",null,[...a[0]||(a[0]=[i(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在 ROS2 中编写一个大的模块时，一般需要依照不同的功能分成多个子包。例如对于一个机器人导航模块，该模块可能被分为定位、路径规划、离线地图等多个子包进行分别编写。那么当我们需要安装该模块时，需要一个个安装这些子包才可以应用全部功能吗？</p><h2 id="元功能包-metapackage" tabindex="-1"><a class="header-anchor" href="#元功能包-metapackage"><span>元功能包(MetaPackage)</span></a></h2><p>在 ROS2 中，其提供了一种可以将多个不同的功能子包打包成一个大的功能包的方式，当我们需要安装某个功能模块时，只需要直接调用安装这个大的功能包即可。该包又被称为 <strong>元功能包</strong> ，即 <strong>MetaPackage</strong>。</p><p>MetaPackage 本质上是 Linux 的一种文件管理系统的概念。作为一个 ROS2 当中的一个没有实质性内容的“虚包”，其可以被认为是一个装订书的“目录索引”。他依赖了其它的软件包，因此通过它就可以将其他的包组合起来。而安装 MetaPackage 时，它就会告诉引用该安装的人或设备这个集合中有哪些子包，以及应该去哪里下载。</p><h2 id="它用来做什么" tabindex="-1"><a class="header-anchor" href="#它用来做什么"><span>它用来做什么？</span></a></h2><p>方便用户安装。inclusive☝🤓</p><h2 id="如何实现" tabindex="-1"><a class="header-anchor" href="#如何实现"><span>如何实现？</span></a></h2><p>以以下目录为例，希望将下述所有功能包装订为一个元功能包：</p><p><a href="./assets/metapackage_using_package_structure.png">一个拥有多个包的目录</a></p><p>首先移动到希望创建元功能包的工作空间，在src目录下新增一个功能包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ros2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tutor_ls_plumbing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行上述命令后，记得“cd”回到工作空间.</p><p>在新创建的 “tutor_ls_plumbing” 包下，仅需修改 <strong>package.xml</strong> 即可，无需修改 “CMakeLists.txt”</p><p>在 <strong>package.xml</strong> 中，添加 <strong>&lt;exec_depend&gt;&lt;/exec_depend&gt;</strong>，并在其中添加你想要放进索引的功能包：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-xml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;base_interfaces_demo&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exec_depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕后 <strong>编译</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">colcon</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --packages-select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tutor_ls_plumbing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最后应该类似于这样：</p><p><a href="./assets/setting_exec_depend.png">编译后图</a></p><hr><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记"><span>后记</span></a></h2><p>你也可以在 GitHub 上面寻找其他人的项目，来看看它们所设计的 metapackage。</p><p>例如<a href="https://github.com/ros-navigation/navigation2/tree/main/navigation2" target="_blank" rel="noopener noreferrer">navigation2/navigation2 at main · ros-navigation/navigation2</a></p>`,24)])])}const d=e(t,[["render",r]]),g=JSON.parse('{"path":"/learningNote/Ros2_Note/co_me_2/2025_03_12.html","title":"ROS2-009-通信机制补完：元功能包 MetaPackage","lang":"zh-CN","frontmatter":{"title":"ROS2-009-通信机制补完：元功能包 MetaPackage","icon":"yin-yang","date":"2025-03-12T00:00:00.000Z","category":["Computer","robot","ROS"]},"git":{"createdTime":1741765707000,"updatedTime":1741765707000,"contributors":[{"name":"Jeacson_Snake","username":"","email":"Jeacson_Snake@outlook.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"learningNote/Ros2_Note/co_me_2/2025_03_12.md","excerpt":"<h2>简介</h2>\\n<p>在 ROS2 中编写一个大的模块时，一般需要依照不同的功能分成多个子包。例如对于一个机器人导航模块，该模块可能被分为定位、路径规划、离线地图等多个子包进行分别编写。那么当我们需要安装该模块时，需要一个个安装这些子包才可以应用全部功能吗？</p>\\n<h2>元功能包(MetaPackage)</h2>\\n<p>在 ROS2 中，其提供了一种可以将多个不同的功能子包打包成一个大的功能包的方式，当我们需要安装某个功能模块时，只需要直接调用安装这个大的功能包即可。该包又被称为 <strong>元功能包</strong> ，即 <strong>MetaPackage</strong>。</p>"}');export{d as comp,g as data};
